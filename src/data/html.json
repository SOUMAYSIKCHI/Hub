{
    "subject": "HTML Essentials",
    "modules": [
      {
        "title": "Getting Started",
        "submodules": [
          {
            "title": "HTML Structure",
            "topics": [
              {
                "title": "What is an HTML Document?",
                "content": {
                  "explanation": "An HTML document is the standard file format for web pages. It is a text file containing HTML elements that define the content and structure of a web page. Browsers read these documents and render them visually. The basic structure includes a `<!DOCTYPE html>` declaration, an `<html>` root element, a `<head>` section for metadata, and a `<body>` section for visible content.",
                  "explainLikeKid": "Imagine an HTML document as a blueprint for a LEGO house. It tells the browser (the builder) exactly where to put all the different LEGO bricks (the content like text, pictures, and videos) so it can build the house for you to see!",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My First HTML Page</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n    <p>This is my very first HTML page.</p>\n</body>\n</html>",
                  "input": "User navigates to the HTML file in a web browser.",
                  "output": "A web page displaying 'Hello, World!' as a main heading and 'This is my very first HTML page.' as a paragraph."
                },
                "interviewQuestions": [
                  {
                    "question": "Explain the purpose of `<!DOCTYPE html>`.",
                    "answer": "The `<!DOCTYPE html>` declaration defines the document type and version of HTML being used (HTML5 in this case). It tells the browser how to render the page, ensuring it uses the latest rendering standards and avoids 'quirks mode'."
                  },
                  {
                    "question": "What is the significance of the `<html>` tag?",
                    "answer": "The `<html>` tag is the root element of an HTML page. All other elements, except for the `<!DOCTYPE>` declaration, are nested inside it. It signifies the beginning and end of the HTML document."
                  },
                  {
                    "question": "Differentiate between the `<head>` and `<body>` sections.",
                    "answer": "The `<head>` section contains metadata about the HTML document, which is not directly visible on the web page. This includes the page title, character set, links to stylesheets, and scripts. The `<body>` section contains all the content that is visible to the user, such as text, images, videos, and interactive elements."
                  },
                  {
                    "question": "Why is the `lang` attribute important in the `<html>` tag?",
                    "answer": "The `lang` attribute specifies the primary language of the document. This is crucial for accessibility tools like screen readers, search engine optimization (SEO), and helps browsers render text correctly by applying appropriate language-specific rules (e.g., hyphenation)."
                  },
                  {
                    "question": "Can an HTML document exist without a `<body>` tag? What would happen?",
                    "answer": "While an HTML document can technically be parsed without a `<body>` tag, it wouldn't display any visible content. The browser would still render the `<head>` content (like the title in the tab), but the main area of the page would be blank."
                  },
                  {
                    "question": "What is the role of the `meta` tags within the `<head>`?",
                    "answer": "Meta tags provide metadata about the HTML document, such as character encoding (`charset`), viewport settings (`viewport`), description, keywords, author, etc. This information is used by browsers, search engines, and other web services, but isn't displayed directly on the page."
                  }
                ]
              },
              {
                "title": "Basic HTML Tags: Headings, Paragraphs, Links, Images",
                "content": {
                  "explanation": "HTML provides a set of basic tags to structure and display common content types:\n- Headings (`<h1>` to `<h6>`): Used to define titles and subtitles, with `<h1>` being the most important and `<h6>` the least.\n- Paragraphs (`<p>`): Used for blocks of regular text.\n- Links (`<a>`): Creates hyperlinks to other web pages or resources. The `href` attribute specifies the destination URL.\n- Images (`<img>`): Embeds images into the document. The `src` attribute specifies the image source, and `alt` provides alternative text for accessibility.",
                  "explainLikeKid": "Think of it like making a picture book:\n- `<h1>` to `<h6>` are like the big, medium, or small titles for each chapter.\n- `<p>` is for all the regular story sentences.\n- `<a>` is like a magic door that takes you to another picture book when you touch it.\n- `<img>` is for sticking pictures right onto your page!",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Basic Tags Example</title>\n</head>\n<body>\n    <h1>Welcome to My Page</h1>\n    <h2>About Me</h2>\n    <p>This is a paragraph about myself. I love learning new things!</p>\n    <p>Visit <a href=\"https://www.example.com\">Example Website</a> for more information.</p>\n    <img src=\"https://via.placeholder.com/150\" alt=\"A placeholder image\">\n</body>\n</html>",
                  "input": "User opens the HTML file in a browser.",
                  "output": "A web page displaying 'Welcome to My Page' as a large heading, 'About Me' as a smaller heading, two paragraphs of text (one with a clickable link to 'Example Website'), and a 150x150 pixel placeholder image."
                },
                "interviewQuestions": [
                  {
                    "question": "When would you use `<h2>` versus `<h4>`?",
                    "answer": "`<h2>` is used for a major section heading, indicating content that is a sub-section of `<h1>`. `<h4>` would be used for a sub-heading within an `<h3>` section, indicating a more specific topic. The numerical value indicates hierarchical importance, not just size."
                  },
                  {
                    "question": "What is the purpose of the `alt` attribute in the `<img>` tag?",
                    "answer": "The `alt` (alternative text) attribute provides a textual description of the image. It's crucial for accessibility, as screen readers read this text to visually impaired users. It also displays if the image fails to load and is used by search engines for image indexing."
                  },
                  {
                    "question": "How do you create an internal link (a link to a section within the same page)?",
                    "answer": "You use the `<a>` tag with the `href` attribute pointing to an ID of an element on the same page. For example, `<a href=\"#section-id\">Go to Section</a>` would link to an element with `id=\"section-id\"`."
                  },
                  {
                    "question": "Explain the difference between block-level and inline-level elements, giving examples from the basic tags.",
                    "answer": "Block-level elements (like `<h1>`, `<p>`) occupy the full available width and start on a new line. Inline-level elements (like `<a>`, `<img>`) only occupy the space needed for their content and do not start on a new line, allowing other elements to sit beside them."
                  },
                  {
                    "question": "What is a 'dead link' and how can you prevent them?",
                    "answer": "A 'dead link' is a hyperlink that no longer works because the target page has been moved or deleted. Preventing them involves regularly checking links, using relative paths for internal links where possible, and ensuring external links point to stable resources. Server-side checks and monitoring tools can also help."
                  },
                  {
                    "question": "Can an `<img>` tag have child elements? Why or why not?",
                    "answer": "No, an `<img>` tag is a 'void' element (or self-closing tag). It cannot have child elements because its purpose is solely to embed an image, not to contain other content."
                  }
                ]
              },
              {
                "title": "Lists and Tables",
                "content": {
                  "explanation": "HTML provides tags to organize information into lists and tables:\n- Unordered Lists (`<ul>` and `<li>`): Used for items where the order doesn't matter (e.g., bullet points).\n- Ordered Lists (`<ol>` and `<li>`): Used for items where the order is important (e.g., numbered steps).\n- Description Lists (`<dl>`, `<dt>`, `<dd>`): Used for terms and their descriptions.\n- Tables (`<table>`, `<thead>`, `<tbody>`, `<tr>`, `<th>`, `<td>`): Used to display tabular data in rows and columns. `<th>` defines header cells, `<td>` defines data cells.",
                  "explainLikeKid": "Imagine you're organizing your toys:\n- `<ul>` and `<li>` are for making a list of toys where the order doesn't matter, like 'robot, car, doll'.\n- `<ol>` and `<li>` are for making a list where the order matters, like '1. put away robot, 2. put away car'.\n- `<table>` is like a special grid where you can put information in neat boxes, like organizing your toys by 'Type' and 'Color'.",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Lists and Tables Example</title>\n    <style>\n        table, th, td {\n            border: 1px solid black;\n            border-collapse: collapse;\n            padding: 8px;\n        }\n    </style>\n</head>\n<body>\n    <h2>My Favorite Fruits (Unordered)</h2>\n    <ul>\n        <li>Apple</li>\n        <li>Banana</li>\n        <li>Cherry</li>\n    </ul>\n\n    <h2>Morning Routine (Ordered)</h2>\n    <ol>\n        <li>Wake up</li>\n        <li>Brush teeth</li>\n        <li>Eat breakfast</li>\n    </ol>\n\n    <h2>Glossary (Description List)</h2>\n    <dl>\n        <dt>HTML</dt>\n        <dd>HyperText Markup Language</dd>\n        <dt>CSS</dt>\n        <dd>Cascading Style Sheets</dd>\n    </dl>\n\n    <h2>Student Grades</h2>\n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Math</th>\n                <th>Science</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>Alice</td>\n                <td>90</td>\n                <td>85</td>\n            </tr>\n            <tr>\n                <td>Bob</td>\n                <td>75</td>\n                <td>92</td>\n            </tr>\n        </tbody>\n    </table>\n</body>\n</html>",
                  "input": "User opens the HTML file in a browser.",
                  "output": "A web page displaying:\n- An unordered list of fruits (Apple, Banana, Cherry) with bullet points.\n- An ordered list of morning routine steps (1. Wake up, 2. Brush teeth, 3. Eat breakfast) with numbers.\n- A description list with 'HTML' and 'CSS' as terms and their full forms as descriptions.\n- A table with two rows of student grades for Math and Science, with a header row for Name, Math, and Science."
                },
                "interviewQuestions": [
                  {
                    "question": "When would you prefer an `<ul>` over an `<ol>`?",
                    "answer": "You would prefer an `<ul>` (unordered list) when the order of the items is not semantically significant, like a list of ingredients in a recipe where the sequence doesn't change the outcome, or a list of features for a product."
                  },
                  {
                    "question": "Explain the purpose of `<thead>`, `<tbody>`, and `<tfoot>` in a table.",
                    "answer": "`<thead>` groups the header content of a table, `<tbody>` groups the main body content, and `<tfoot>` groups the footer content (e.g., sums or totals). These elements help with table semantics, accessibility, and allow browsers to render large tables incrementally."
                  },
                  {
                    "question": "How can you merge cells in an HTML table?",
                    "answer": "You can merge cells using the `rowspan` and `colspan` attributes on `<th>` or `<td>` elements. `rowspan` merges cells vertically across rows, and `colspan` merges cells horizontally across columns."
                  },
                  {
                  "question": "What is the difference between `<th>` and `<td>`?",
                  "answer": "`<th>` (table header) is used for heading cells in a table, providing context for the data in a column or row. Browsers typically render `<th>` content as bold and centered. `<td>` (table data) is used for regular data cells in a table."
                  },
                  {
                    "question": "Describe a scenario where a `<dl>` list would be more appropriate than `<ul>` or `<ol>`.",
                    "answer": "A `<dl>` (description list) is ideal for a glossary, a list of frequently asked questions with answers, or any scenario where you have a term and its corresponding definition or explanation. For example, a list of software terms and their meanings."
                  },
                  {
                    "question": "Is it good practice to use tables for page layout? Why or why not?",
                    "answer": "No, it is generally considered bad practice to use tables for page layout. Tables are designed for tabular data. Using them for layout creates accessibility issues, makes the code less semantic, harder to maintain, and less responsive across different screen sizes. CSS Grid and Flexbox are the modern and correct tools for layout."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "title": "Forms and User Input",
        "submodules": [
          {
            "title": "Building Forms",
            "topics": [
              {
                "title": "The `<form>` Element and Attributes",
                "content": {
                  "explanation": "The `<form>` element is a container for interactive controls that allow users to submit information. Key attributes include:\n- `action`: Specifies the URL where the form data will be sent upon submission.\n- `method`: Defines the HTTP method to use for sending data (typically `GET` or `POST`). `GET` appends data to the URL, `POST` sends it in the request body.\n- `enctype`: Specifies how the form data should be encoded when submitted (important for file uploads). Common values are `application/x-www-form-urlencoded` (default), `multipart/form-data` (for file uploads), and `text/plain`.",
                  "explainLikeKid": "Imagine a special box where you write down your wishes. The `<form>` is like that box. The `action` is where you want to send your wishes (maybe to Santa!). The `method` is how you send them, like a letter (`POST`) or shouting them out loud (`GET`).",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Form Example</title>\n</head>\n<body>\n    <form action=\"/submit-form\" method=\"POST\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br><br>\n        \n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n        \n        <input type=\"submit\" value=\"Login\">\n    </form>\n</body>\n</html>",
                  "input": "User enters 'myuser' in Username and 'mypass' in Password, then clicks 'Login'.",
                  "output": "The browser attempts to send a POST request to `/submit-form` with the data `username=myuser&password=mypass`. The specific output depends on the server's response (e.g., a new page, a success message)."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the primary purpose of the `<form>` element?",
                    "answer": "The `<form>` element is used to collect user input. It acts as a container for various form controls (like text fields, checkboxes, buttons) and defines how and where that data should be sent to a server for processing."
                  },
                  {
                    "question": "When would you use `GET` method versus `POST` method for form submission?",
                    "answer": "`GET` is used for retrieving data and when the form data is not sensitive (e.g., search queries). Data is appended to the URL. `POST` is used for submitting data that modifies the server's state (e.g., creating a new user, submitting a sensitive form). Data is sent in the request body and is not visible in the URL."
                  },
                  {
                    "question": "Explain the `enctype` attribute and its common values.",
                    "answer": "The `enctype` attribute specifies how form data should be encoded before sending it to the server. The default is `application/x-www-form-urlencoded` for most forms. `multipart/form-data` is essential for forms that include file uploads. `text/plain` sends data as plain text, primarily for debugging."
                  },
                  {
                    "question": "What is the role of the `name` attribute in form inputs?",
                    "answer": "The `name` attribute is crucial because it provides the name for the form control, which is used to identify the input's value when the form data is submitted to the server. Without a `name` attribute, the input's value won't be sent."
                  },
                  {
                    "question": "Can you submit a form without a `<input type=\"submit\">` button? How?",
                    "answer": "Yes, a form can be submitted programmatically using JavaScript, for example, `document.getElementById('myform').submit();`. Also, pressing Enter within certain input fields (like a single-line text input) can trigger a form submission."
                  },
                  {
                    "question": "How does HTML5 enhance form validation?",
                    "answer": "HTML5 introduced built-in form validation features using attributes like `required`, `pattern`, `min`, `max`, `step`, `minlength`, `maxlength`, and input types like `email`, `url`, `number`, `date`, etc. This allows for client-side validation without needing JavaScript for basic checks."
                  }
                ]
              },
              {
                "title": "Input Types and Attributes",
                "content": {
                  "explanation": "HTML offers various `<input>` types to collect different kinds of data. Each type comes with specific attributes:\n- `text`: Single-line text input.\n- `password`: Hides input characters.\n- `email`: For email addresses, provides basic format validation.\n- `number`: For numerical input, can include `min`, `max`, `step`.\n- `date`, `time`, `datetime-local`: For date and time selection.\n- `checkbox`, `radio`: For multiple selections (`checkbox`) or single selection from a group (`radio`). Requires `name` and `value`.\n- `file`: For file uploads (`accept` attribute for file types).\n- `submit`, `reset`, `button`: For form actions.\n- `hidden`: For data not visible to the user but sent with the form.\n- Common attributes: `placeholder`, `required`, `readonly`, `disabled`, `value`, `name`, `id`.",
                  "explainLikeKid": "Imagine you have different kinds of toy boxes:\n- A 'name' toy box (`text`).\n- A 'secret code' toy box (`password`).\n- A 'number' toy box (`number`) where you can only put numbers.\n- A 'choose one' toy box (`radio`) where you can pick only one toy.\n- A 'choose many' toy box (`checkbox`) where you can pick lots of toys.\n- The 'required' label means you MUST put something in that box!",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Input Types Example</title>\n</head>\n<body>\n    <form action=\"/process-inputs\" method=\"POST\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"user_name\" placeholder=\"Your full name\" required><br><br>\n\n        <label for=\"user_email\">Email:</label>\n        <input type=\"email\" id=\"user_email\" name=\"email\" placeholder=\"your@example.com\"><br><br>\n\n        <label for=\"quantity\">Quantity (1-10):</label>\n        <input type=\"number\" id=\"quantity\" name=\"quantity\" min=\"1\" max=\"10\" value=\"1\"><br><br>\n\n        <p>Choose your favorite color:</p>\n        <input type=\"radio\" id=\"red\" name=\"fav_color\" value=\"red\">\n        <label for=\"red\">Red</label><br>\n        <input type=\"radio\" id=\"blue\" name=\"fav_color\" value=\"blue\">\n        <label for=\"blue\">Blue</label><br><br>\n\n        <p>Select interests:</p>\n        <input type=\"checkbox\" id=\"coding\" name=\"interests\" value=\"coding\">\n        <label for=\"coding\">Coding</label><br>\n        <input type=\"checkbox\" id=\"reading\" name=\"interests\" value=\"reading\">\n        <label for=\"reading\">Reading</label><br><br>\n\n        <label for=\"upload_file\">Upload File:</label>\n        <input type=\"file\" id=\"upload_file\" name=\"user_file\" accept=\".png,.jpg\"><br><br>\n\n        <input type=\"submit\" value=\"Submit Order\">\n    </form>\n</body>\n</html>",
                  "input": "User fills in fields, selects 'Blue' and 'Coding', uploads an image, then submits.",
                  "output": "The browser sends a POST request to `/process-inputs` with form data, including: `user_name`, `email`, `quantity`, `fav_color=blue`, `interests=coding`, and the uploaded file (if applicable and `enctype` is correct)."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the primary difference between `type=\"radio\"` and `type=\"checkbox\"`?",
                    "answer": "`type=\"radio\"` allows a user to select only one option from a group of choices (defined by having the same `name` attribute). `type=\"checkbox\"` allows a user to select zero, one, or multiple options from a group."
                  },
                  {
                    "question": "Explain the `placeholder` attribute. Is it a substitute for `<label>`?",
                    "answer": "The `placeholder` attribute provides a hint to the user about what kind of information is expected in the input field. It is *not* a substitute for `<label>` because it disappears when the user starts typing and is not accessible to screen readers in the same way a label is. Labels are essential for accessibility."
                  },
                  {
                    "question": "How can you make an input field mandatory using HTML5 attributes?",
                    "answer": "You can make an input field mandatory by adding the `required` boolean attribute to the input tag, for example: `<input type=\"text\" required>`."
                  },
                  {
                    "question": "Describe a scenario where `type=\"hidden\"` would be useful.",
                    "answer": "A `type=\"hidden\"` input is useful for storing data that needs to be submitted with the form but should not be visible or modifiable by the user. Examples include session IDs, product IDs in an e-commerce cart, or security tokens."
                  },
                  {
                    "question": "What is the purpose of the `accept` attribute with `type=\"file\"`?",
                    "answer": "The `accept` attribute provides a hint to the user agent (browser) about which file types the server is willing to accept. It filters the file selection dialog, making it easier for users to choose the correct file type (e.g., `accept=\".jpg, .png, .gif\"` or `accept=\"image/*\"`). It's a client-side convenience, and server-side validation is still necessary."
                  },
                  {
                    "question": "How does the `pattern` attribute work for form validation?",
                    "answer": "The `pattern` attribute takes a regular expression (regex) as its value. It allows you to specify a specific format for the input's value. If the user's input does not match the pattern, the browser will show a validation error upon submission, preventing the form from being sent."
                  }
                ]
              },
              {
                "title": "Buttons and `<select>`, `<textarea>`",
                "content": {
                  "explanation": "Beyond basic inputs, HTML provides elements for more complex form interactions:\n- `<button>`: A generic button element. Can be `type=\"submit\"`, `type=\"reset\"`, or `type=\"button\"` (for JavaScript actions).\n- `<select>` and `<option>`: Creates a dropdown list for single or multiple selections. `value` attribute on `<option>` is submitted.\n- `<textarea>`: A multi-line text input area, useful for longer messages. `rows` and `cols` attributes control initial size.\n- `<label>`: Associates text labels with form controls, improving accessibility and usability (clicking the label focuses the input). Use the `for` attribute with the input's `id`.",
                  "explainLikeKid": "Imagine you're ordering food:\n- `<button>` is like the 'Order Now' button.\n- `<select>` is like choosing from a menu with a list of options that drop down.\n- `<textarea>` is like the big box where you write a long note to the chef, maybe about your special requests.",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Buttons & Select/Textarea Example</title>\n</head>\n<body>\n    <form action=\"/process-order\" method=\"POST\">\n        <label for=\"pizza_topping\">Choose a pizza topping:</label>\n        <select id=\"pizza_topping\" name=\"topping\">\n            <option value=\"pepperoni\">Pepperoni</option>\n            <option value=\"mushrooms\">Mushrooms</option>\n            <option value=\"olives\" selected>Olives</option>\n            <option value=\"pineapple\">Pineapple</option>\n        </select><br><br>\n\n        <label for=\"order_notes\">Special instructions:</label><br>\n        <textarea id=\"order_notes\" name=\"notes\" rows=\"5\" cols=\"30\" placeholder=\"e.g., extra cheese, no onions\"></textarea><br><br>\n\n        <button type=\"submit\">Place Order</button>\n        <button type=\"reset\">Clear Form</button>\n        <button type=\"button\" onclick=\"alert('You clicked a generic button!')\">Say Hello</button>\n    </form>\n</body>\n</html>",
                  "input": "User selects 'Pineapple' from the dropdown, types 'Make it extra spicy!' in the textarea, then clicks 'Place Order'.",
                  "output": "The browser sends a POST request to `/process-order` with `topping=pineapple` and `notes=Make it extra spicy!`. Clicking 'Say Hello' shows a JavaScript alert box."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the difference between `<button type=\"submit\">` and `<input type=\"submit\">`?",
                    "answer": "Both trigger form submission. However, `<button>` is more flexible: it can contain HTML content (like an image and text), while `<input type=\"submit\">` can only display plain text as its value. `<button>` is generally preferred for styling and richer content."
                  },
                  {
                    "question": "How do you make multiple selections possible in a `<select>` element?",
                    "answer": "You add the `multiple` boolean attribute to the `<select>` tag. This allows users to select multiple options by holding down Ctrl/Cmd and clicking, or by dragging."
                  },
                  {
                    "question": "Explain the importance of the `<label>` element for accessibility.",
                    "answer": "The `<label>` element provides a descriptive text for form controls. When a label is associated with an input (using `for` and `id`), clicking the label focuses the associated input. For screen reader users, the label text is read aloud when the input receives focus, making forms usable for visually impaired individuals."
                  },
                  {
                    "question": "What is the purpose of `rows` and `cols` attributes in `<textarea>`?",
                    "answer": "`rows` specifies the visible number of lines in the text area, and `cols` specifies the visible width of the text area in average character widths. These attributes define the initial size of the textarea but can be overridden by CSS or user resizing."
                  },
                  {
                    "question": "How do you set a default selected option in a `<select>` dropdown?",
                    "answer": "You add the `selected` boolean attribute to the desired `<option>` tag within the `<select>` element."
                  },
                  {
                    "question": "What happens if you omit the `type` attribute for a `<button>` element inside a form?",
                    "answer": "If the `type` attribute is omitted for a `<button>` element inside a form, its default behavior is `type=\"submit\"`. This means it will act as a submit button and attempt to send the form data."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "title": "Semantic HTML and Layout",
        "submodules": [
          {
            "title": "Understanding Semantic Tags",
            "topics": [
              {
                "title": "HTML5 Semantic Elements: `header`, `nav`, `main`, `article`, `section`, `aside`, `footer`",
                "content": {
                  "explanation": "HTML5 introduced semantic elements to provide more meaningful structure to web pages, improving readability for both developers and machines (like search engines and screen readers). They don't inherently change the visual appearance but convey purpose:\n- `<header>`: Represents introductory content, usually containing navigation, headings, and logos.\n- `<nav>`: Contains navigation links.\n- `<main>`: Represents the dominant content of the `<body>`, unique to this document.\n- `<article>`: Represents self-contained, independent content (e.g., a blog post, a news story).\n- `<section>`: A thematic grouping of content, typically with a heading. Can be a sub-section of an `article` or `main`.\n- `<aside>`: Content indirectly related to the main content (e.g., sidebars, pull quotes).\n- `<footer>`: Represents the footer for its nearest sectioning content or the root element.",
                  "explainLikeKid": "Imagine your webpage is a book:\n- `<header>` is like the book's cover, with its title and author.\n- `<nav>` is like the table of contents that helps you jump to different chapters.\n- `<main>` is the actual story part of the book.\n- `<article>` is like a single chapter or a short story inside the book.\n- `<section>` is like a smaller part of a chapter.\n- `<aside>` is like a little note or fun fact box on the side of a page.\n- `<footer>` is like the back cover with publisher info or copyright.",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Semantic HTML Example</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        header, nav, main, article, section, aside, footer {\n            border: 1px solid #ccc;\n            padding: 15px;\n            margin-bottom: 10px;\n        }\n        header { background-color: #e0f7fa; }\n        nav { background-color: #bbdefb; }\n        main { background-color: #f1f8e9; display: flex; }\n        article { background-color: #ffe0b2; flex: 3; margin-right: 10px; }\n        section { background-color: #ffccbc; margin-bottom: 10px; }\n        aside { background-color: #f8bbd0; flex: 1; }\n        footer { background-color: #e3f2fd; }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>My Awesome Blog</h1>\n        <nav>\n            <ul>\n                <li><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Contact</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        <article>\n            <h2>Latest News: HTML is Fun!</h2>\n            <p>Today, we're talking about the joys of semantic HTML...</p>\n            <section>\n                <h3>Why Semantics Matter</h3>\n                <p>Semantic tags improve accessibility and SEO.</p>\n            </section>\n            <section>\n                <h3>Examples in Practice</h3>\n                <p>Using header, nav, article, etc.</p>\n            </section>\n        </article>\n        <aside>\n            <h3>Related Links</h3>\n            <ul>\n                <li><a href=\"#\">Learn CSS</a></li>\n                <li><a href=\"#\">JavaScript Basics</a></li>\n            </ul>\n        </aside>\n    </main>\n\n    <footer>\n        <p>&copy; 2023 My Blog. All rights reserved.</p>\n    </footer>\n</body>\n</html>",
                  "input": "User views the HTML page.",
                  "output": "A web page structured with distinct, bordered sections representing a header with a title and navigation, a main content area containing an article with nested sections and an aside sidebar, and a footer at the bottom. Each section has a different background color to visually delineate the semantic tags."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the main benefit of using semantic HTML tags?",
                    "answer": "The main benefit is improved meaning and structure. It makes the code more readable for developers, enhances accessibility for screen readers and other assistive technologies, and aids search engines in understanding the content and context of a page, leading to better SEO."
                  },
                  {
                    "question": "When would you choose `<section>` over `<div>`?",
                    "answer": "You would choose `<section>` when the content inside represents a distinct, thematic grouping of content, typically with its own heading. `<div>` is a generic container with no semantic meaning and should be used when no other semantic element is appropriate (e.g., for styling purposes where content has no specific structural role)."
                  },
                  {
                    "question": "Can you have multiple `<header>` or `<footer>` elements on a single page?",
                    "answer": "Yes, you can have multiple `<header>` and `<footer>` elements. While a page typically has one global `<header>` and `<footer>` for the entire document, these elements can also be used as headers/footers for specific sectioning content like `<article>` or `<section>`."
                  },
                  {
                    "question": "What is the difference between `<article>` and `<section>`?",
                    "answer": "`<article>` is for self-contained, independent content that could logically be distributed and reused independently (e.g., a blog post, a comment). `<section>` is a thematic grouping of content, usually within an `article` or `main`, that belongs together and typically has a heading. An `article` can contain `section`s, and a `section` can contain `article`s if it makes semantic sense."
                  },
                  {
                    "question": "What is the role of the `<main>` element, and what are its restrictions?",
                    "answer": "The `<main>` element represents the dominant content of the `<body>`. There should be only one `<main>` element per document, and it should not be a descendant of `<article>`, `<aside>`, `<footer>`, `<header>`, or `<nav>`."
                  },
                  {
                    "question": "How do semantic tags contribute to SEO?",
                    "answer": "Semantic tags help search engine crawlers better understand the structure and meaning of your content. For example, crawlers know that content within a `<nav>` is navigation, within an `<article>` is primary content, and within a `<header>` is introductory. This improves indexing accuracy and can positively impact search rankings."
                  }
                ]
              },
              {
                "title": "The `<iframe>` Tag",
                "content": {
                  "explanation": "The `<iframe>` (inline frame) element is used to embed another HTML document within the current HTML document. It essentially creates a Browse context (a nested window) within your page. Key attributes include:\n- `src`: The URL of the document to embed.\n- `width`, `height`: Dimensions of the iframe.\n- `frameborder`: (Deprecated in HTML5, use CSS `border` instead) Controls border around the iframe.\n- `allow`: Specifies a feature policy for the iframe (e.g., `fullscreen`, `geolocation`).\n- `sandbox`: Enables an extra set of restrictions on the content in the iframe for security purposes.",
                  "explainLikeKid": "Imagine you're watching a TV show, but on your TV, there's a smaller TV playing a different show inside it! The `<iframe>` is like that smaller TV, showing another webpage right inside your current webpage.",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>iFrame Example</title>\n    <style>\n        iframe {\n            border: 2px solid blue;\n            width: 80%;\n            height: 400px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Embedding Content with iframe</h1>\n    <p>Below is an embedded page from example.com:</p>\n    <iframe src=\"https://www.example.com\" title=\"Example Website\"></iframe>\n\n    <h2>Embedded YouTube Video (with specific attributes)</h2>\n    <iframe \n        width=\"560\" \n        height=\"315\" \n        src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n        title=\"YouTube video player\" \n        frameborder=\"0\" \n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n        referrerpolicy=\"strict-origin-when-cross-origin\" \n        allowfullscreen>\n    </iframe>\n</body>\n</html>",
                  "input": "User views the HTML page.",
                  "output": "A web page displaying a heading, a paragraph, and two embedded frames:\n1. An iframe showing the content of 'example.com' with a blue border.\n2. An iframe showing a YouTube video player (if the URL is valid and allowed by YouTube's embedding policies), sized 560x315 pixels."
                },
                "interviewQuestions": [
                  {
                    "question": "What are the common use cases for `<iframe>`?",
                    "answer": "Common use cases include embedding content from other sources like YouTube videos, Google Maps, social media feeds (e.g., Twitter widgets), payment gateways, or embedding an entire separate web application within a page."
                  },
                  {
                    "question": "What are the security concerns associated with `<iframe>` and how can `sandbox` help?",
                    "answer": "Security concerns include clickjacking, cross-site scripting (XSS) if untrusted content is embedded, and tracking user behavior. The `sandbox` attribute mitigates these by applying a set of restrictions, such as preventing script execution, form submission, pop-ups, or access to local storage. You can selectively enable features by specifying values like `allow-scripts`, `allow-forms`, etc."
                  },
                  {
                    "question": "Explain the `allow` attribute in the context of iframes.",
                    "answer": "The `allow` attribute specifies a feature policy for the iframe, enabling or disabling certain browser features (like autoplay, camera, geolocation, fullscreen) within the embedded content. This gives developers control over what capabilities the framed content has access to."
                  },
                  {
                    "question": "Is `<iframe>` considered good for SEO? Why or why not?",
                    "answer": "Generally, `<iframe>` content is not directly indexed by search engines as part of the parent page's content, which can be detrimental to SEO if critical content is only available within an iframe. Search engines might struggle to crawl and attribute the embedded content to the parent page. It's better for content that is supplementary or external."
                  },
                  {
                    "question": "How can you communicate between the parent document and an iframe, and vice-versa?",
                    "answer": "Communication between a parent and an iframe, or between iframes, is possible using JavaScript's `postMessage()` API. This allows for secure cross-origin communication by sending messages between different Browse contexts."
                  },
                  {
                    "question": "What is `frameborder` and why is it deprecated?",
                    "answer": "`frameborder` was an attribute used to specify whether a border should be drawn around the iframe (0 for no border, 1 for a border). It is deprecated in HTML5 because styling concerns are now handled exclusively by CSS, specifically using the `border` property."
                  }
                ]
              }
            ]
          },
          {
            "title": "Multimedia and Canvas",
            "topics": [
              {
                "title": "The `<video>` and `<audio>` Tags",
                "content": {
                  "explanation": "HTML5 introduced native support for embedding video and audio without relying on plugins. This provides better accessibility and broader device compatibility.\n- `<video>`: Embeds video content. Attributes include `src`, `controls` (shows playback controls), `autoplay`, `loop`, `muted`, `poster` (image to show before video starts), `width`, `height`, `preload`.\n- `<audio>`: Embeds audio content. Attributes include `src`, `controls`, `autoplay`, `loop`, `muted`, `preload`.\n- `<source>`: Used within `<video>` or `<audio>` to specify multiple media sources (e.g., different formats) for browser compatibility, with the browser picking the first supported one. The `type` attribute specifies the MIME type.",
                  "explainLikeKid": "Imagine you have a magic picture frame:\n- The `<video>` frame can show movies!\n- The `<audio>` frame can play music or stories!\n- `controls` is like the remote control so you can play, pause, or change the volume.\n- `autoplay` means it starts playing by itself.\n- `poster` is like a cover photo for your movie before it starts.",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Multimedia Example</title>\n    <style>\n        video, audio {\n            border: 1px solid #ddd;\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1>HTML5 Multimedia</h1>\n\n    <h2>Sample Video</h2>\n    <video controls width=\"640\" height=\"360\" poster=\"https://via.placeholder.com/640x360?text=Video+Poster\">\n        <source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\">\n        <source src=\"https://www.w3schools.com/html/mov_bbb.ogg\" type=\"video/ogg\">\n        Your browser does not support the video tag.\n    </video>\n\n    <h2>Sample Audio</h2>\n    <audio controls loop preload=\"auto\">\n        <source src=\"https://www.w3schools.com/html/horse.mp3\" type=\"audio/mpeg\">\n        <source src=\"https://www.w3schools.com/html/horse.ogg\" type=\"audio/ogg\">\n        Your browser does not support the audio tag.\n    </audio>\n\n    <h2>Autoplay Muted Video</h2>\n    <video autoplay muted loop width=\"320\" height=\"180\">\n        <source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\">\n        Your browser does not support the video tag.\n    </video>\n</body>\n</html>",
                  "input": "User views the HTML page.",
                  "output": "A web page displaying:\n- A video player with controls (play/pause, volume, seek bar), showing a placeholder image before playing, and playing a sample video if supported by the browser.\n- An audio player with controls, looping, and preloading audio, playing a sample audio file.\n- A smaller video player that automatically plays on load, is muted, and loops."
                },
                "interviewQuestions": [
                  {
                    "question": "Why is it recommended to include multiple `<source>` tags within `<video>` or `<audio>`?",
                    "answer": "Different browsers support different media formats (e.g., MP4, WebM, Ogg for video; MP3, WAV, Ogg for audio). Providing multiple `<source>` tags with different `type` attributes ensures that the browser can pick the first format it supports, maximizing compatibility across various browsers and devices."
                  },
                  {
                    "question": "What is the purpose of the `preload` attribute?",
                    "answer": "The `preload` attribute advises the browser on how much of the media file to download when the page loads. Values include `none` (no preloading), `metadata` (only fetch metadata like duration), and `auto` (preload the entire file). This helps optimize page load times and user experience."
                  },
                  {
                    "question": "Can `autoplay` be reliably used with audio and video elements?",
                    "answer": "No, `autoplay` is often restricted by browsers, especially for audio, to prevent annoying users and conserve data. Most modern browsers require videos to be `muted` for `autoplay` to work, or for the user to have previously interacted with the site. Always provide controls for user agency."
                  },
                  {
                    "question": "How do you add captions or subtitles to a `<video>` element?",
                    "answer": "You add captions or subtitles using the `<track>` element inside the `<video>` tag. The `src` attribute points to a WebVTT (.vtt) file, and the `kind` attribute specifies the type of track (e.g., `captions`, `subtitles`, `descriptions`)."
                  },
                  {
                    "question": "What is the significance of the `poster` attribute in the `<video>` tag?",
                    "answer": "The `poster` attribute specifies an image URL that the browser will display as a thumbnail or placeholder before the video starts playing. This is useful for providing context or an appealing visual preview to the user."
                  },
                  {
                    "question": "How can you provide fallback content for browsers that don't support `<video>` or `<audio>`?",
                    "answer": "Any content placed directly between the opening and closing `<video>` or `<audio>` tags will be displayed by browsers that do not support these HTML5 elements. This is where you typically put a message like 'Your browser does not support the video tag.' or a link to download the media."
                  }
                ]
              },
              {
                "title": "The `<canvas>` Element",
                "content": {
                  "explanation": "The `<canvas>` element provides an API for drawing graphics using JavaScript. It's essentially a blank bitmap surface that you can manipulate pixel by pixel. It's widely used for animations, game graphics, data visualizations, and image manipulation.\n- It's a container; drawing is done via JavaScript.\n- Requires `width` and `height` attributes (or they default to 300x150).\n- The `getContext()` method returns a drawing context, most commonly '2d' for 2D graphics or 'webgl' for 3D graphics.",
                  "explainLikeKid": "Imagine a blank whiteboard. The `<canvas>` is like that whiteboard. You can't draw on it with HTML, but you can give it to a robot (JavaScript) and tell the robot exactly where to draw lines, circles, or even moving pictures!",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Canvas Example</title>\n    <style>\n        canvas {\n            border: 1px solid black;\n            background-color: #f0f0f0;\n        }\n    </style>\n</head>\n<body>\n    <h1>HTML5 Canvas Drawing</h1>\n    <canvas id=\"myCanvas\" width=\"400\" height=\"200\"></canvas>\n\n    <script>\n        const canvas = document.getElementById('myCanvas');\n        const ctx = canvas.getContext('2d');\n\n        if (ctx) {\n            // Draw a rectangle\n            ctx.fillStyle = 'blue';\n            ctx.fillRect(50, 50, 100, 75);\n\n            // Draw a circle\n            ctx.beginPath();\n            ctx.arc(250, 100, 40, 0, 2 * Math.PI);\n            ctx.fillStyle = 'red';\n            ctx.fill();\n            ctx.lineWidth = 2;\n            ctx.strokeStyle = 'darkred';\n            ctx.stroke();\n\n            // Draw text\n            ctx.font = '30px Arial';\n            ctx.fillStyle = 'green';\n            ctx.fillText('Hello Canvas!', 10, 30);\n\n        } else {\n            alert('Your browser does not support Canvas.');\n        }\n    </script>\n</body>\n</html>",
                  "input": "User views the HTML page in a browser.",
                  "output": "A web page displaying a white canvas with a black border, inside which:\n- A blue rectangle (50,50 to 150,125).\n- A red circle with a dark red border (centered at 250,100 with radius 40).\n- Green text 'Hello Canvas!' at the top-left (10,30)."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the fundamental difference between SVG and Canvas?",
                    "answer": "SVG (Scalable Vector Graphics) is vector-based, meaning graphics are defined by XML markup, can be scaled without loss of quality, and each element is part of the DOM. Canvas is raster-based (bitmap), meaning graphics are drawn pixel by pixel, are resolution-dependent, and the drawing itself is not part of the DOM; only the `<canvas>` element is."
                  },
                  {
                  "question": "How do you draw on a `<canvas>` element?",
                  "answer": "You draw on a `<canvas>` element exclusively using JavaScript. First, you get a reference to the canvas element using `document.getElementById()`. Then, you get a drawing context using `canvas.getContext('2d')` for 2D graphics, or `canvas.getContext('webgl')` for 3D. All drawing operations are then performed on this context object."
                  },
                  {
                    "question": "What are common use cases for `<canvas>`?",
                    "answer": "Common use cases include dynamic charts and graphs (data visualization), complex animations and interactive games, image processing and photo editing tools, real-time video processing, and drawing tools."
                  },
                  {
                    "question": "Does HTML directly draw graphics on the canvas?",
                    "answer": "No, HTML only provides the `<canvas>` element as a bitmap container. All drawing operations, animations, and manipulations on the canvas are performed using JavaScript through its drawing API (e.g., `getContext('2d')`)."
                  },
                  {
                    "question": "What happens if a user's browser does not support the Canvas API?",
                    "answer": "If a browser doesn't support the Canvas API, any content placed between the `<canvas>` opening and closing tags will be displayed instead. This allows for providing fallback content, such as a message or an image, to users with older browsers."
                  },
                  {
                    "question": "How can you save the content of a canvas as an image file?",
                    "answer": "You can save the canvas content as an image using the `toDataURL()` method of the canvas element's API. This method returns a data URL representation of the canvas content, which can then be used in an `<img>` tag or downloaded by the user."
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "title": "Advanced HTML Concepts",
        "submodules": [
          {
            "title": "Metadata and Document Settings",
            "topics": [
              {
                "title": "Meta Tags, Favicons, and Viewport",
                "content": {
                  "explanation": "Metadata provides information about the HTML document itself, not directly visible on the page. It's crucial for browser rendering, search engines, and social media sharing.\n- `<meta charset=\"UTF-8\">`: Specifies the character encoding for the document, essential for proper text display.\n- `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`: Crucial for responsive web design, instructing browsers to set the viewport width to the device's width and set the initial zoom level.\n- `<meta name=\"description\" content=\"...\">`: A short, accurate summary of the page content, used by search engines.\n- `<meta name=\"keywords\" content=\"...\">`: (Less relevant for modern SEO) Keywords related to the page content.\n- `<link rel=\"icon\" href=\"favicon.ico\" type=\"image/x-icon\">`: Links to a favicon, the small icon displayed in browser tabs.\n- Open Graph Meta Tags (e.g., `og:title`, `og:image`): Used by social media platforms (Facebook, Twitter, LinkedIn) to control how content is displayed when shared.",
                  "explainLikeKid": "Imagine your webpage is like a secret agent. Meta tags are like the agent's secret file that tells everyone important details about them, but you can't see it on their uniform. It tells the browser what language they speak, how big they are, and what their mission is!",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"This is an example page demonstrating various meta tags and favicon.\">\n    <meta name=\"keywords\" content=\"HTML, meta tags, favicon, viewport, SEO\">\n    <meta name=\"author\" content=\"Your Name\">\n\n    \n    <link rel=\"icon\" href=\"https://www.google.com/favicon.ico\" type=\"image/x-icon\">\n\n    \n    <meta property=\"og:title\" content=\"My Awesome Page Title\">\n    <meta property=\"og:description\" content=\"A short description for social media sharing.\">\n    <meta property=\"og:image\" content=\"https://via.placeholder.com/1200x630?text=Social+Share+Image\">\n    <meta property=\"og:url\" content=\"https://www.yourwebsite.com/mypage\">\n    <meta property=\"og:type\" content=\"website\">\n\n    <title>Advanced Meta Tags</title>\n</head>\n<body>\n    <h1>Check out the browser tab and social media sharing!</h1>\n    <p>This page uses various meta tags for better SEO and social media presence.</p>\n</body>\n</html>",
                  "input": "User navigates to the page. (Simulated input for social media: user tries to share this page link on Facebook/Twitter).",
                  "output": "A web page displaying a heading and a paragraph. In the browser tab, the Google favicon will appear (if loaded correctly). If shared on a social media platform that supports Open Graph, the share preview would show 'My Awesome Page Title', 'A short description for social media sharing.', and the specified placeholder image."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the importance of `<meta charset=\"UTF-8\">`?",
                    "answer": "It specifies the character encoding for the document, ensuring that characters are displayed correctly across different languages and systems. UTF-8 is a universal character encoding that supports almost all characters and symbols in the world, preventing display issues like mojibake."
                  },
                  {
                    "question": "Explain the significance of the viewport meta tag for responsive design.",
                    "answer": "The viewport meta tag (`<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">`) instructs the browser to set the width of the viewport to the device's screen width and to set the initial zoom level to 1. This is crucial for responsive web design as it ensures the page scales correctly and doesn't appear zoomed out or too small on mobile devices."
                  },
                  {
                    "question": "How do `meta name=\"description\"` and Open Graph `og:description` differ?",
                    "answer": "`meta name=\"description\"` is primarily used by search engines as a snippet in search results. Open Graph `og:description` is specifically designed for social media platforms (like Facebook, Twitter) to control the text preview when the page is shared. They serve similar purposes but for different consumers."
                  },
                  {
                    "question": "What is a favicon, and how is it linked?",
                    "answer": "A favicon is a small icon (typically 16x16 or 32x32 pixels) that appears in the browser tab, bookmark list, or shortcut icon. It's linked using the `<link>` tag within the `<head>` section, with `rel=\"icon\"` and `href` pointing to the icon file (e.g., `.ico`, `.png`, `.svg`)."
                  },
                  {
                    "question": "Why are `meta name=\"keywords\"` tags less important for SEO today?",
                    "answer": "Search engines, particularly Google, have significantly de-emphasized the `keywords` meta tag due to past abuse (keyword stuffing). They now rely more on the actual content of the page, user engagement, and other ranking factors to determine relevance."
                  },
                  {
                    "question": "How can you prevent a page from being indexed by search engines using meta tags?",
                    "answer": "You can use `<meta name=\"robots\" content=\"noindex, nofollow\">` to tell search engine robots not to index the page and not to follow any links on it. Alternatively, `noindex` can be used alone to prevent indexing while still allowing links to be followed."
                  }
                ]
              }
            ]
          },
          {
            "title": "Accessibility (A11y)",
            "topics": [
              {
                "title": "ARIA Attributes and Best Practices",
                "content": {
                  "explanation": "Accessibility (A11y) ensures web content is usable by everyone, including people with disabilities. ARIA (Accessible Rich Internet Applications) attributes provide additional semantics to HTML elements, especially for dynamic content or custom widgets, when native HTML doesn't suffice.\n- `aria-label`: Provides an accessible name for an element when no visible text label is available.\n- `aria-labelledby`: Refers to an element that acts as the label for the current element.\n- `aria-describedby`: Refers to an element that provides a description for the current element.\n- `aria-hidden`: Indicates that an element and all its descendants are not visible or perceivable to any user.\n- `aria-live`: Indicates regions of a page that are likely to update and describes the types of updates the user agent, assistive technologies, and user should expect.\n- `role`: Defines the purpose of an element (e.g., `role=\"button\"`, `role=\"navigation\"`).\nBest Practices:\n- Use semantic HTML first (native elements have built-in accessibility).\n- Provide `alt` text for images.\n- Use `<label>` for form inputs.\n- Ensure sufficient color contrast.\n- Make content keyboard-navigable.\n- Provide clear focus indicators.",
                  "explainLikeKid": "Imagine your website is a magical house. Some people can see everything, but some can only hear or use a special pointer. ARIA attributes are like little notes you stick on things that tell the blind person what something is, or how to use a special gadget, even if they can't see it clearly. It helps everyone enjoy the house!",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>ARIA Accessibility Example</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        .button-group button { margin-right: 10px; padding: 10px; cursor: pointer; }\n        #live-region { border: 1px solid blue; padding: 10px; margin-top: 20px; }\n    </style>\n</head>\n<body>\n    <h1>Accessibility with ARIA</h1>\n\n    <button aria-label=\"Close dialog box\">X</button>\n    <p>The button above has no visible text but is accessible via aria-label.</p>\n\n    <div role=\"alert\" aria-live=\"polite\" id=\"status-message\">\n        \n        <p>Form submission successful!</p>\n    </div>\n\n    <div class=\"button-group\">\n        <button role=\"button\" aria-pressed=\"false\" onclick=\"toggleState(this)\">Toggle Me</button>\n        <button aria-describedby=\"hint-text\">Help</button>\n        <span id=\"hint-text\" style=\"display:none;\">Clicking this button will show a help message.</span>\n    </div>\n\n    <input type=\"text\" id=\"search_input\" placeholder=\"Search...\">\n    <label for=\"search_input\" class=\"visually-hidden\">Search for products</label>\n\n    <script>\n        function toggleState(button) {\n            const isPressed = button.getAttribute('aria-pressed') === 'true';\n            button.setAttribute('aria-pressed', !isPressed);\n            button.textContent = isPressed ? 'Toggle Me' : 'Toggled!';\n        }\n\n        // Example of dynamic content update for live region\n        setTimeout(() => {\n            document.getElementById('status-message').innerHTML = '<p>New notification received!</p>';\n        }, 3000);\n    </script>\n</body>\n</html>",
                  "input": "User views the page, interacts with the 'Toggle Me' button, and waits for 3 seconds.",
                  "output": "A web page demonstrating ARIA attributes:\n- A button labeled 'X' visually, but announced as 'Close dialog box' by screen readers.\n- A status message area (`role=\"alert\"` and `aria-live=\"polite\"`) initially showing 'Form submission successful!', which updates to 'New notification received!' after 3 seconds, announced by screen readers.\n- A 'Toggle Me' button that changes its text and `aria-pressed` state on click.\n- A 'Help' button associated with hidden descriptive text.\n- A search input with a visually hidden label, still accessible to screen readers."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the primary goal of web accessibility?",
                    "answer": "The primary goal of web accessibility is to ensure that web content, services, and technologies are designed and developed so that people with disabilities can use them. This includes people with visual, auditory, physical, speech, cognitive, and neurological disabilities."
                  },
                  {
                    "question": "When should you use ARIA attributes instead of native HTML elements?",
                    "answer": "ARIA should be used only when native HTML elements do not sufficiently convey the semantic meaning or interactive behavior of a component. Always prefer semantic HTML elements (like `<button>`, `<nav>`, `<input>`) first, as they have built-in accessibility. ARIA is for bridging gaps, not replacing existing semantics."
                  },
                  {
                    "question": "Explain `aria-live` and its use cases.",
                    "answer": "`aria-live` is used to indicate a region of the page that receives updates and that should be announced by screen readers to the user. `polite` means updates are announced when the user is idle, while `assertive` means updates are announced immediately, interrupting the current task. It's used for dynamic content like status messages, chat updates, or form validation errors."
                  },
                  {
                    "question": "How does `alt` text contribute to image accessibility?",
                    "answer": "`alt` (alternative) text provides a textual description of an image for users who cannot see it (e.g., visually impaired users using screen readers) or when the image fails to load. It helps convey the image's content and purpose, ensuring that information isn't lost."
                  },
                  {
                    "question": "What is the importance of keyboard navigation for accessibility?",
                    "answer": "Many users, especially those with motor disabilities or who are visually impaired, rely on keyboard navigation (using Tab, Shift+Tab, Enter, Spacebar) instead of a mouse. Ensuring all interactive elements are focusable and operable via keyboard is fundamental for accessibility."
                  },
                  {
                    "question": "Describe the concept of 'semantic HTML first' in the context of accessibility.",
                    "answer": "'Semantic HTML first' means leveraging the built-in semantic meaning of HTML elements whenever possible (e.g., using `<button>` for a button, `<a>` for a link). These elements inherently provide accessibility features and roles. Only when a native HTML element doesn't exist for a particular UI pattern or interaction should ARIA attributes be considered to enhance semantics."
                  }
                ]
              }
            ]
          },
          {
            "title": "HTML5 APIs and Integrations",
            "topics": [
              {
                "title": "Geolocation API",
                "content": {
                  "explanation": "The Geolocation API allows web applications to access the user's current geographical location (latitude and longitude) with their permission. It uses various sources like GPS, Wi-Fi, and IP addresses. Key methods:\n- `navigator.geolocation.getCurrentPosition(successCallback, errorCallback, options)`: Retrieves the user's current position once.\n- `navigator.geolocation.watchPosition(successCallback, errorCallback, options)`: Registers a handler function that will be called automatically whenever the user's position changes.\nOptions include `enableHighAccuracy` (more precise but slower/more power), `timeout`, and `maximumAge`.",
                  "explainLikeKid": "Imagine your phone or computer has a special map that knows exactly where you are. The Geolocation API is like asking that map, 'Hey, where am I right now?' And it tells your webpage your secret location, but only if you say 'yes' first!",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Geolocation API</title>\n    <style>\n        #location-info { border: 1px solid green; padding: 15px; margin-top: 20px; }\n    </style>\n</head>\n<body>\n    <h1>Your Location</h1>\n    <button onclick=\"getLocation()\">Get My Location</button>\n    <div id=\"location-info\">Click the button to get your coordinates.</div>\n\n    <script>\n        function getLocation() {\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition(showPosition, showError);\n            } else {\n                document.getElementById('location-info').innerHTML = \"Geolocation is not supported by this browser.\";\n            }\n        }\n\n        function showPosition(position) {\n            const lat = position.coords.latitude;\n            const lon = position.coords.longitude;\n            document.getElementById('location-info').innerHTML = `Latitude: ${lat}<br>Longitude: ${lon}`;\n        }\n\n        function showError(error) {\n            let errorMessage;\n            switch(error.code) {\n                case error.PERMISSION_DENIED:\n                    errorMessage = \"User denied the request for Geolocation.\";\n                    break;\n                case error.POSITION_UNAVAILABLE:\n                    errorMessage = \"Location information is unavailable.\";\n                    break;\n                case error.TIMEOUT:\n                    errorMessage = \"The request to get user location timed out.\";\n                    break;\n                case error.UNKNOWN_ERROR:\n                    errorMessage = \"An unknown error occurred.\";\n                    break;\n            }\n            document.getElementById('location-info').innerHTML = `Error: ${errorMessage}`;\n        }\n    </script>\n</body>\n</html>",
                  "input": "User clicks 'Get My Location' button. Browser prompts for location permission. User grants permission (or denies).",
                  "output": "If permission is granted, the 'location-info' div will display the user's latitude and longitude (e.g., 'Latitude: 17.3850<br>Longitude: 78.4867'). If denied or an error occurs, an appropriate error message will be shown (e.g., 'Error: User denied the request for Geolocation.')."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the primary security concern when using the Geolocation API?",
                    "answer": "The primary security concern is user privacy. Accessing location data requires explicit user permission, and the API is only available over secure contexts (HTTPS) to prevent eavesdropping."
                  },
                  {
                    "question": "What is the difference between `getCurrentPosition()` and `watchPosition()`?",
                    "answer": "`getCurrentPosition()` retrieves the user's location once. `watchPosition()` continuously monitors the user's location and calls a provided callback function whenever the position changes. `watchPosition()` is suitable for real-time tracking, while `getCurrentPosition()` is for a single point-in-time check."
                  },
                  {
                    "question": "How do you handle user refusal to share their location?",
                    "answer": "The `getCurrentPosition()` and `watchPosition()` methods both accept an `errorCallback` function. This function receives an error object that includes an `error.code` property (e.g., `PERMISSION_DENIED`) allowing you to detect and inform the user about their decision or offer alternatives."
                  },
                  {
                    "question": "What are the three main options you can pass to the Geolocation methods?",
                    "answer": "The three main options are: `enableHighAccuracy` (boolean, defaults to false, requests more precise location), `timeout` (maximum time in milliseconds to wait for a position), and `maximumAge` (maximum age in milliseconds of a possible cached position that is acceptable)."
                  },
                  {
                    "question": "Why is it important to use Geolocation over HTTPS?",
                    "answer": "The Geolocation API, like many modern browser APIs that involve sensitive user data, is restricted to secure contexts (HTTPS) to protect user privacy and prevent man-in-the-middle attacks where malicious actors could intercept or tamper with location data."
                  },
                  {
                    "question": "Can Geolocation work without GPS?",
                    "answer": "Yes, Geolocation can work without GPS. It can use various sources to determine location, including Wi-Fi positioning, cellular triangulation, and IP address lookup. The accuracy may vary depending on the available sources."
                  }
                ]
              },
              {
                "title": "Web Storage API (localStorage, sessionStorage)",
                "content": {
                  "explanation": "The Web Storage API provides mechanisms for web applications to store data on the client-side within the user's browser. It offers a larger storage capacity and is more secure and flexible than cookies.\n- `localStorage`: Stores data with no expiration date. Data persists even after the browser is closed and reopened.\n- `sessionStorage`: Stores data for the duration of a single browser session. Data is cleared when the browser tab or window is closed.\nBoth use key-value pairs and are accessed via `window.localStorage` and `window.sessionStorage`.\nMethods: `setItem(key, value)`, `getItem(key)`, `removeItem(key)`, `clear()`, `key(index)`.",
                  "explainLikeKid": "Imagine your browser is a little desk. `localStorage` is like a magic drawer that saves things forever, even if you close the desk and open it later. `sessionStorage` is like a temporary sticky note you use for just one work session; when you close the desk, the note disappears.",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Web Storage API</title>\n    <style>\n        #storage-info { border: 1px solid purple; padding: 15px; margin-top: 20px; }\n    </style>\n</head>\n<body>\n    <h1>Web Storage Example</h1>\n\n    <h2>Local Storage</h2>\n    <label for=\"local-input\">Enter data for Local Storage:</label>\n    <input type=\"text\" id=\"local-input\" placeholder=\"Your permanent data\">\n    <button onclick=\"saveLocalData()\">Save to Local</button>\n    <button onclick=\"loadLocalData()\">Load from Local</button>\n    <div id=\"local-output\"></div>\n\n    <h2>Session Storage</h2>\n    <label for=\"session-input\">Enter data for Session Storage:</label>\n    <input type=\"text\" id=\"session-input\" placeholder=\"Your temporary data\">\n    <button onclick=\"saveSessionData()\">Save to Session</button>\n    <button onclick=\"loadSessionData()\">Load from Session</button>\n    <div id=\"session-output\"></div>\n\n    <script>\n        function saveLocalData() {\n            const data = document.getElementById('local-input').value;\n            localStorage.setItem('myPermanentData', data);\n            document.getElementById('local-output').textContent = 'Saved: ' + data;\n        }\n\n        function loadLocalData() {\n            const data = localStorage.getItem('myPermanentData');\n            document.getElementById('local-output').textContent = 'Loaded: ' + (data || 'No data found');\n        }\n\n        function saveSessionData() {\n            const data = document.getElementById('session-input').value;\n            sessionStorage.setItem('myTemporaryData', data);\n            document.getElementById('session-output').textContent = 'Saved: ' + data;\n        }\n\n        function loadSessionData() {\n            const data = sessionStorage.getItem('myTemporaryData');\n            document.getElementById('session-output').textContent = 'Loaded: ' + (data || 'No data found');\n        }\n\n        // Load data on initial page load\n        window.onload = function() {\n            loadLocalData();\n            loadSessionData();\n        };\n    </script>\n</body>\n</html>",
                  "input": "User enters 'Hello Local!' in local storage input, clicks 'Save to Local'. Then enters 'Hello Session!' in session storage input, clicks 'Save to Session'. User then closes and reopens the browser tab, then clicks 'Load from Local' and 'Load from Session'.",
                  "output": "Initially, 'No data found' might appear. After saving:\n- 'local-output' displays 'Saved: Hello Local!'\n- 'session-output' displays 'Saved: Hello Session!'\nAfter closing and reopening the tab and clicking 'Load':\n- 'local-output' will display 'Loaded: Hello Local!' (data persisted)\n- 'session-output' will display 'Loaded: No data found' (data was cleared)"
                },
                "interviewQuestions": [
                  {
                    "question": "What is the main difference between `localStorage` and `sessionStorage`?",
                    "answer": "`localStorage` stores data with no expiration, meaning it persists even after the browser is closed and reopened. `sessionStorage` stores data only for the duration of a single browser session (until the tab or window is closed)."
                  },
                  {
                    "question": "When would you choose `localStorage` over cookies?",
                    "answer": "`localStorage` is preferred for larger amounts of client-side data (typically 5-10 MB vs. 4KB for cookies), it's not sent with every HTTP request (reducing overhead), and it's simpler to use with a JavaScript API compared to parsing cookie strings. Cookies are still necessary for server-side state management, authentication tokens, and path-specific data."
                  },
                  {
                    "question": "What kind of data can be stored in Web Storage, and how do you store/retrieve complex data?",
                    "answer": "Web Storage primarily stores data as strings. To store complex data types like objects or arrays, you need to serialize them to JSON strings using `JSON.stringify()` before storing and then parse them back using `JSON.parse()` upon retrieval."
                  },
                  {
                    "question": "Is Web Storage synchronous or asynchronous?",
                    "answer": "Web Storage operations (`setItem`, `getItem`, `removeItem`) are synchronous. This means they block the main thread until the operation is complete, which can be a concern for performance if very large amounts of data are being accessed."
                  },
                  {
                    "question": "How does Web Storage differ from IndexedDB?",
                    "answer": "Web Storage is simpler and provides a key-value store for smaller amounts of data, primarily for string data. IndexedDB is a more powerful, transactional, client-side database system capable of storing large amounts of structured data, including binary data, and it's asynchronous."
                  },
                  {
                    "question": "How can you clear all items from `localStorage` or `sessionStorage`?",
                    "answer": "You can clear all items from `localStorage` using `localStorage.clear()`. Similarly, for `sessionStorage`, you use `sessionStorage.clear()`."
                  }
                ]
              },
              {
                "title": "Drag and Drop API",
                "content": {
                  "explanation": "The HTML Drag and Drop API allows elements to be dragged and dropped by users within a web page or between web pages (though cross-origin drag-and-drop is restricted). It uses a series of DOM events:\n- `draggable` attribute: Set to `true` on the element you want to make draggable.\n- `ondragstart`: Fired when the user starts dragging an element. Use `event.dataTransfer.setData()` to store data.\n- `ondragover`: Fired repeatedly while a draggable element is dragged over a valid drop target. Must call `event.preventDefault()` to allow dropping.\n- `ondrop`: Fired when the draggable element is dropped on a valid drop target. Use `event.dataTransfer.getData()` to retrieve data.\n- `ondragenter`, `ondragleave`, `ondragend`: Other useful events for visual feedback.",
                  "explainLikeKid": "Imagine you have some LEGO bricks, and you want to move them around. The Drag and Drop API is like giving your computer special sticky hands. It lets you pick up a LEGO brick (`draggable`), move it over another spot (`ondragover`), and then stick it there (`ondrop`).",
                  "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Drag and Drop API</title>\n    <style>\n        .draggable {\n            width: 100px;\n            height: 100px;\n            background-color: lightblue;\n            border: 2px solid blue;\n            margin: 10px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            cursor: grab;\n        }\n        .dropzone {\n            width: 200px;\n            height: 200px;\n            background-color: lightgreen;\n            border: 2px dashed green;\n            margin: 20px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 1.2em;\n        }\n        .dropzone.hover {\n            background-color: #aaffaa;\n            border-style: solid;\n        }\n    </style>\n</head>\n<body>\n    <h1>Drag and Drop Example</h1>\n\n    <div class=\"draggable\" draggable=\"true\" id=\"drag1\">\n        Drag Me 1\n    </div>\n    <div class=\"draggable\" draggable=\"true\" id=\"drag2\">\n        Drag Me 2\n    </div>\n\n    <div class=\"dropzone\" id=\"drop1\">\n        Drop Here\n    </div>\n\n    <script>\n        const draggables = document.querySelectorAll('.draggable');\n        const dropzone = document.getElementById('drop1');\n\n        draggables.forEach(draggable => {\n            draggable.addEventListener('dragstart', (e) => {\n                e.dataTransfer.setData('text/plain', e.target.id); // Set the ID of the dragged element\n                e.dataTransfer.effectAllowed = 'move';\n            });\n        });\n\n        dropzone.addEventListener('dragover', (e) => {\n            e.preventDefault(); // Crucial: Allows a drop to happen\n            e.dataTransfer.dropEffect = 'move';\n            dropzone.classList.add('hover');\n        });\n\n        dropzone.addEventListener('dragleave', () => {\n            dropzone.classList.remove('hover');\n        });\n\n        dropzone.addEventListener('drop', (e) => {\n            e.preventDefault();\n            dropzone.classList.remove('hover');\n            const data = e.dataTransfer.getData('text/plain');\n            const draggedElement = document.getElementById(data);\n            if (draggedElement) {\n                dropzone.appendChild(draggedElement);\n                draggedElement.style.backgroundColor = 'lightcoral';\n            }\n        });\n    </script>\n</body>\n</html>",
                  "input": "User drags 'Drag Me 1' into the 'Drop Here' box.",
                  "output": "A web page with two light blue draggable squares and one light green drop zone. When 'Drag Me 1' is dragged over the drop zone, the drop zone's background turns lighter green and its border becomes solid. When 'Drag Me 1' is dropped, it moves inside the 'Drop Here' box, and its background color changes to light coral."
                },
                "interviewQuestions": [
                  {
                    "question": "What is the purpose of `event.preventDefault()` in the `dragover` event handler?",
                    "answer": "`event.preventDefault()` is crucial in the `dragover` event handler because, by default, browsers do not allow dropping elements. Calling `preventDefault()` explicitly tells the browser that the drop target is valid and allows the `drop` event to fire."
                  },
                  {
                    "question": "How do you make an HTML element draggable?",
                    "answer": "You make an HTML element draggable by setting the `draggable` attribute to `true` on that element, e.g., `<div draggable=\"true\">...</div>`."
                  },
                  {
                    "question": "How do you pass data during a drag-and-drop operation?",
                    "answer": "You pass data using the `DataTransfer` object, which is accessible via `event.dataTransfer`. In the `dragstart` event, you use `event.dataTransfer.setData(format, data)` to store data. In the `drop` event, you use `event.dataTransfer.getData(format)` to retrieve it."
                  },
                  {
                    "question": "What is the `effectAllowed` property, and when is it used?",
                    "answer": "The `effectAllowed` property of the `DataTransfer` object (set during `dragstart`) indicates what drag effects are allowed for the data being dragged (e.g., `copy`, `move`, `link`, `copyMove`). It helps the browser display the correct cursor to the user, indicating valid drop actions."
                  },
                  {
                    "question": "List the key events involved in a drag and drop operation.",
                    "answer": "The key events are:\n- `dragstart`: Fired on the draggable element when dragging begins.\n- `drag`: Fired on the draggable element throughout the drag operation.\n- `dragenter`: Fired on the drop target when the dragged element enters it.\n- `dragleave`: Fired on the drop target when the dragged element leaves it.\n- `dragover`: Fired repeatedly on the drop target while the dragged element is over it.\n- `drop`: Fired on the drop target when the element is dropped.\n- `dragend`: Fired on the draggable element when the drag operation ends (after drop or cancellation)."
                  },
                  {
                    "question": "Can you drag and drop elements between different browser windows/tabs using the HTML Drag and Drop API?",
                    "answer": "Yes, the HTML Drag and Drop API generally supports dragging and dropping elements between different browser windows or tabs, provided they are from the same origin (same protocol, host, and port) or if cross-origin policies are specifically configured to allow it (which is less common for security reasons)."
                  }
                ]
              }
            ]
          }
        ]
      }
    ],
    "projects": [
      {
        "title": "Interactive Portfolio Website",
        "description": "A responsive single-page portfolio featuring sections for 'About Me', 'Skills', 'Projects', and 'Contact'. Includes a smooth scroll navigation.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Portfolio</title>\n    <style>\n        body { font-family: 'Arial', sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; color: #333; }\n        nav { background-color: #333; color: white; padding: 1em 0; text-align: center; position: sticky; top: 0; z-index: 1000; }\n        nav a { color: white; margin: 0 15px; text-decoration: none; font-weight: bold; }\n        nav a:hover { color: #88d498; }\n        .container { max-width: 960px; margin: 20px auto; padding: 0 20px; }\n        section { padding: 60px 0; border-bottom: 1px solid #eee; }\n        h1, h2 { text-align: center; color: #444; }\n        .skill-list, .project-list { list-style: none; padding: 0; display: flex; flex-wrap: wrap; justify-content: center; }\n        .skill-list li, .project-card { background-color: white; border: 1px solid #ddd; margin: 10px; padding: 20px; text-align: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1); border-radius: 8px; }\n        .skill-list li { flex: 0 0 calc(33% - 40px); }\n        .project-card { flex: 0 0 calc(45% - 40px); }\n        footer { text-align: center; padding: 20px; background-color: #333; color: white; }\n        @media (max-width: 768px) { .skill-list li, .project-card { flex: 0 0 calc(100% - 40px); } }\n    </style>\n</head>\n<body>\n    <nav>\n        <a href=\"#about\">About</a>\n        <a href=\"#skills\">Skills</a>\n        <a href=\"#projects\">Projects</a>\n        <a href=\"#contact\">Contact</a>\n    </nav>\n\n    <div class=\"container\">\n        <section id=\"about\">\n            <h1>About Me</h1>\n            <p>Hello! I'm a passionate web developer eager to learn and build amazing things. I specialize in front-end development and love creating user-friendly and responsive web applications.</p>\n            <img src=\"https://via.placeholder.com/150\" alt=\"Profile Picture\" style=\"border-radius: 50%; display: block; margin: 20px auto;\">\n        </section>\n\n        <section id=\"skills\">\n            <h2>My Skills</h2>\n            <ul class=\"skill-list\">\n                <li>HTML5</li>\n                <li>CSS3</li>\n                <li>JavaScript</li>\n                <li>Responsive Design</li>\n                <li>Git & GitHub</li>\n                <li>Problem Solving</li>\n            </ul>\n        </section>\n\n        <section id=\"projects\">\n            <h2>My Projects</h2>\n            <div class=\"project-list\">\n                <div class=\"project-card\">\n                    <h3>Project Alpha</h3>\n                    <p>A simple landing page showcasing modern CSS techniques.</p>\n                    <a href=\"#\" target=\"_blank\">View Project</a>\n                </div>\n                <div class=\"project-card\">\n                    <h3>Project Beta</h3>\n                    <p>An interactive form validation example using HTML5 attributes.</p>\n                    <a href=\"#\" target=\"_blank\">View Project</a>\n                </div>\n                <div class=\"project-card\">\n                    <h3>Project Gamma</h3>\n                    <p>A basic calculator built purely with HTML, CSS, and JavaScript.</p>\n                    <a href=\"#\" target=\"_blank\">View Project</a>\n                </div>\n            </div>\n        </section>\n\n        <section id=\"contact\">\n            <h2>Contact Me</h2>\n            <p>Feel free to reach out for collaborations or opportunities!</p>\n            <form action=\"#\">\n                <label for=\"name\">Name:</label><br>\n                <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n                <label for=\"email\">Email:</label><br>\n                <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n                <label for=\"message\">Message:</label><br>\n                <textarea id=\"message\" name=\"message\" rows=\"5\" required></textarea><br><br>\n                <button type=\"submit\">Send Message</button>\n            </form>\n        </section>\n    </div>\n\n    <footer>\n        <p>&copy; 2023 My Portfolio. All rights reserved.</p>\n    </footer>\n    <script>\n        document.querySelectorAll('nav a').forEach(anchor => {\n            anchor.addEventListener('click', function (e) {\n                e.preventDefault();\n                document.querySelector(this.getAttribute('href')).scrollIntoView({\n                    behavior: 'smooth'\n                });\n            });\n        });\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Basic Blog Layout",
        "description": "A simple static blog page demonstrating semantic HTML5 structure with articles, sections, and an aside sidebar.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Simple Blog</title>\n    <style>\n        body { font-family: 'Georgia', serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f8f8f8; color: #333; }\n        header { background-color: #4CAF50; color: white; padding: 1em 0; text-align: center; }\n        header h1 { margin: 0; }\n        nav ul { list-style: none; padding: 0; margin: 0; display: flex; justify-content: center; background-color: #333; }\n        nav ul li a { display: block; color: white; text-align: center; padding: 14px 20px; text-decoration: none; }\n        nav ul li a:hover { background-color: #555; }\n        .container { display: flex; max-width: 1200px; margin: 20px auto; padding: 0 20px; }\n        main { flex: 3; padding-right: 20px; }\n        aside { flex: 1; background-color: #fff; padding: 20px; border-left: 1px solid #eee; box-shadow: 0 2px 5px rgba(0,0,0,0.05); }\n        article { background-color: white; padding: 20px; margin-bottom: 20px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }\n        article h2 { color: #4CAF50; }\n        footer { background-color: #333; color: white; text-align: center; padding: 1em 0; margin-top: 20px; }\n        @media (max-width: 768px) { .container { flex-direction: column; } main { padding-right: 0; } aside { margin-top: 20px; border-left: none; } }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>My Awesome Blog</h1>\n        <p>Your daily dose of interesting reads.</p>\n    </header>\n\n    <nav>\n        <ul>\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">Categories</a></li>\n            <li><a href=\"#\">About</a></li>\n            <li><a href=\"#\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <div class=\"container\">\n        <main>\n            <article>\n                <h2>Exploring Semantic HTML</h2>\n                <p>Published on: <time datetime=\"2023-10-27\">October 27, 2023</time> by John Doe</p>\n                <p>Semantic HTML elements provide meaning to web content, making it more accessible and understandable for both humans and machines.</p>\n                <section>\n                    <h3>Why it matters for SEO</h3>\n                    <p>Search engines use semantic tags to better interpret the relevance and structure of your page content.</p>\n                </section>\n                <section>\n                    <h3>Accessibility Benefits</h3>\n                    <p>Screen readers can navigate semantic structures more effectively, improving the experience for visually impaired users.</p>\n                </section>\n                <a href=\"#\" target=\"_blank\">Read More...</a>\n            </article>\n\n            <article>\n                <h2>The Power of CSS Flexbox</h2>\n                <p>Published on: <time datetime=\"2023-10-25\">October 25, 2023</time> by Jane Smith</p>\n                <p>Flexbox is a powerful CSS layout module that makes designing complex layouts much easier and more efficient.</p>\n                <a href=\"#\" target=\"_blank\">Read More...</a>\n            </article>\n        </main>\n\n        <aside>\n            <h3>Recent Posts</h3>\n            <ul>\n                <li><a href=\"#\">Understanding CSS Grid</a></li>\n                <li><a href=\"#\">JavaScript Event Loop</a></li>\n                <li><a href=\"#\">Responsive Images in HTML</a></li>\n            </ul>\n            <h3>Categories</h3>\n            <ul>\n                <li><a href=\"#\">Web Development</a></li>\n                <li><a href=\"#\">Programming</a></li>\n                <li><a href=\"#\">Design</a></li>\n            </ul>\n        </aside>\n    </div>\n\n    <footer>\n        <p>&copy; 2023 My Simple Blog. All rights reserved.</p>\n    </footer>\n</body>\n</html>"
      },
      {
        "title": "Product Landing Page with Video",
        "description": "A responsive product landing page featuring an embedded video background/hero section and a call-to-action form.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Awesome Product Landing Page</title>\n    <style>\n        body { font-family: 'Roboto', sans-serif; margin: 0; padding: 0; background-color: #fff; color: #333; }\n        .hero { position: relative; width: 100%; height: 100vh; overflow: hidden; display: flex; align-items: center; justify-content: center; text-align: center; color: white; }\n        .hero video { position: absolute; top: 50%; left: 50%; min-width: 100%; min-height: 100%; width: auto; height: auto; z-index: -100; transform: translate(-50%, -50%); background-size: cover; }\n        .hero-content { z-index: 1; background-color: rgba(0, 0, 0, 0.5); padding: 40px; border-radius: 10px; max-width: 600px; }\n        .hero-content h1 { font-size: 3em; margin-bottom: 10px; }\n        .hero-content p { font-size: 1.2em; margin-bottom: 30px; }\n        .cta-button { background-color: #4CAF50; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; font-weight: bold; transition: background-color 0.3s ease; }\n        .cta-button:hover { background-color: #45a049; }\n        .features { padding: 50px 20px; text-align: center; background-color: #f9f9f9; }\n        .features h2 { color: #444; margin-bottom: 30px; }\n        .feature-grid { display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; }\n        .feature-item { background-color: white; padding: 25px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); width: calc(33% - 40px); box-sizing: border-box; }\n        .feature-item h3 { color: #555; }\n        .contact-form { padding: 50px 20px; background-color: #eee; text-align: center; }\n        .contact-form input[type=\"text\"], .contact-form input[type=\"email\"], .contact-form textarea { width: calc(100% - 40px); padding: 12px; margin-bottom: 15px; border: 1px solid #ccc; border-radius: 5px; }\n        .contact-form button { background-color: #007bff; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 1.1em; transition: background-color 0.3s ease; }\n        .contact-form button:hover { background-color: #0056b3; }\n        footer { background-color: #333; color: white; text-align: center; padding: 20px; }\n        @media (max-width: 768px) { .hero { height: 70vh; } .hero-content { padding: 20px; } .hero-content h1 { font-size: 2em; } .feature-item { width: calc(100% - 40px); } }\n    </style>\n</head>\n<body>\n    <div class=\"hero\">\n        <video autoplay muted loop id=\"myVideo\">\n            <source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\">\n            Your browser does not support the video tag.\n        </video>\n        <div class=\"hero-content\">\n            <h1>Experience the Future Today</h1>\n            <p>Discover innovation that transforms your everyday life.</p>\n            <a href=\"#contact\" class=\"cta-button\">Get Started Now</a>\n        </div>\n    </div>\n\n    <section class=\"features\">\n        <h2>Key Features</h2>\n        <div class=\"feature-grid\">\n            <div class=\"feature-item\">\n                <h3>Feature One</h3>\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n            </div>\n            <div class=\"feature-item\">\n                <h3>Feature Two</h3>\n                <p>Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n            </div>\n            <div class=\"feature-item\">\n                <h3>Feature Three</h3>\n                <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.</p>\n            </div>\n        </div>\n    </section>\n\n    <section class=\"contact-form\" id=\"contact\">\n        <h2>Join Our Waitlist</h2>\n        <form action=\"#\">\n            <input type=\"text\" placeholder=\"Your Name\" required>\n            <input type=\"email\" placeholder=\"Your Email\" required>\n            <textarea placeholder=\"Tell us about yourself (optional)\" rows=\"4\"></textarea>\n            <button type=\"submit\">Submit</button>\n        </form>\n    </section>\n\n    <footer>\n        <p>&copy; 2023 Awesome Product. All rights reserved.</p>\n    </footer>\n</body>\n</html>"
      },
      {
        "title": "Interactive Quiz Application",
        "description": "A simple quiz application using HTML for structure and JavaScript for logic, demonstrating form inputs and conditional rendering.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quiz Application</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #e0f7fa; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }\n        .quiz-container { background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); width: 90%; max-width: 600px; text-align: center; }\n        h1 { color: #00796b; margin-bottom: 25px; }\n        .question { margin-bottom: 20px; text-align: left; }\n        .question p { font-size: 1.1em; font-weight: bold; margin-bottom: 15px; }\n        .options label { display: block; margin-bottom: 10px; cursor: pointer; background-color: #f0f0f0; padding: 10px; border-radius: 5px; transition: background-color 0.2s; }\n        .options label:hover { background-color: #e0e0e0; }\n        .options input[type=\"radio\"] { margin-right: 10px; }\n        button { background-color: #00bcd4; color: white; padding: 12px 25px; border: none; border-radius: 5px; cursor: pointer; font-size: 1em; margin-top: 20px; transition: background-color 0.3s; }\n        button:hover { background-color: #00838f; }\n        #result { margin-top: 30px; font-size: 1.3em; font-weight: bold; color: #d32f2f; }\n        .result-score { color: #388e3c; }\n    </style>\n</head>\n<body>\n    <div class=\"quiz-container\">\n        <h1>Simple HTML Quiz</h1>\n        <form id=\"quizForm\">\n            <div class=\"question\">\n                <p>1. What does HTML stand for?</p>\n                <div class=\"options\">\n                    <label><input type=\"radio\" name=\"q1\" value=\"a\"> Hyper Text Markup Language</label>\n                    <label><input type=\"radio\" name=\"q1\" value=\"b\"> Hyperlinks and Text Markup Language</label>\n                    <label><input type=\"radio\" name=\"q1\" value=\"c\"> Home Tool Markup Language</label>\n                </div>\n            </div>\n\n            <div class=\"question\">\n                <p>2. Which tag is used for an ordered list?</p>\n                <div class=\"options\">\n                    <label><input type=\"radio\" name=\"q2\" value=\"a\"> &lt;ul&gt;</label>\n                    <label><input type=\"radio\" name=\"q2\" value=\"b\"> &lt;ol&gt;</label>\n                    <label><input type=\"radio\" name=\"q2\" value=\"c\"> &lt;li&gt;</label>\n                </div>\n            </div>\n\n            <div class=\"question\">\n                <p>3. What is the correct HTML element for inserting a line break?</p>\n                <div class=\"options\">\n                    <label><input type=\"radio\" name=\"q3\" value=\"a\"> &lt;lb&gt;</label>\n                    <label><input type=\"radio\" name=\"q3\" value=\"b\"> &lt;break&gt;</label>\n                    <label><input type=\"radio\" name=\"q3\" value=\"c\"> &lt;br&gt;</label>\n                </div>\n            </div>\n\n            <button type=\"submit\">Submit Quiz</button>\n        </form>\n\n        <div id=\"result\"></div>\n    </div>\n\n    <script>\n        document.getElementById('quizForm').addEventListener('submit', function(event) {\n            event.preventDefault();\n            let score = 0;\n            const answers = {\n                q1: 'a',\n                q2: 'b',\n                q3: 'c'\n            };\n\n            for (const questionId in answers) {\n                const selectedOption = document.querySelector(`input[name=\"${questionId}\"]:checked`);\n                if (selectedOption && selectedOption.value === answers[questionId]) {\n                    score++;\n                }\n            }\n\n            const totalQuestions = Object.keys(answers).length;\n            const resultDiv = document.getElementById('result');\n            resultDiv.innerHTML = `You scored <span class=\"result-score\">${score}</span> out of ${totalQuestions}!`;\n            \n            if (score === totalQuestions) {\n                resultDiv.innerHTML += '<p style=\"color: #2e7d32;\">Congratulations! Perfect score!</p>';\n            } else if (score > totalQuestions / 2) {\n                resultDiv.innerHTML += '<p style=\"color: #fbc02d;\">Good job! Keep practicing!</p>';\n            } else {\n                resultDiv.innerHTML += '<p style=\"color: #d32f2f;\">Keep learning, you'll get there!</p>';\n            }\n        });\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Recipe Card Collection",
        "description": "A visually appealing collection of recipe cards using HTML for content and CSS Grid for layout, including image and ingredient lists.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Recipe Collection</title>\n    <style>\n        body { font-family: 'Open Sans', sans-serif; background-color: #f7f7f7; margin: 0; padding: 20px; color: #333; }\n        h1 { text-align: center; color: #4CAF50; margin-bottom: 40px; }\n        .recipe-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 25px; max-width: 1200px; margin: 0 auto; }\n        .recipe-card { background-color: white; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.1); overflow: hidden; display: flex; flex-direction: column; }\n        .recipe-card img { width: 100%; height: 200px; object-fit: cover; border-bottom: 1px solid #eee; }\n        .recipe-content { padding: 20px; }\n        .recipe-content h2 { margin-top: 0; color: #555; }\n        .recipe-content ul { list-style: none; padding: 0; margin-top: 15px; }\n        .recipe-content ul li { background-color: #e8f5e9; margin-bottom: 5px; padding: 8px 12px; border-radius: 5px; font-size: 0.9em; }\n        .recipe-content a { display: inline-block; background-color: #007bff; color: white; padding: 8px 15px; text-decoration: none; border-radius: 5px; margin-top: 15px; transition: background-color 0.3s; }\n        .recipe-content a:hover { background-color: #0056b3; }\n    </style>\n</head>\n<body>\n    <h1>Delicious Recipe Collection</h1>\n\n    <div class=\"recipe-grid\">\n        <div class=\"recipe-card\">\n            <img src=\"https://via.placeholder.com/400x200?text=Spaghetti+Bolognese\" alt=\"Spaghetti Bolognese\">\n            <div class=\"recipe-content\">\n                <h2>Spaghetti Bolognese</h2>\n                <p>A classic Italian meat sauce served with spaghetti. Perfect for a hearty meal.</p>\n                <h3>Ingredients:</h3>\n                <ul>\n                    <li>Ground Beef</li>\n                    <li>Tomatoes</li>\n                    <li>Onions</li>\n                    <li>Garlic</li>\n                    <li>Spaghetti</li>\n                </ul>\n                <a href=\"#\">View Recipe</a>\n            </div>\n        </div>\n\n        <div class=\"recipe-card\">\n            <img src=\"https://via.placeholder.com/400x200?text=Vegetable+Stir+Fry\" alt=\"Vegetable Stir Fry\">\n            <div class=\"recipe-content\">\n                <h2>Vegetable Stir Fry</h2>\n                <p>Quick and healthy stir-fry packed with fresh vegetables and a savory sauce.</p>\n                <h3>Ingredients:</h3>\n                <ul>\n                    <li>Broccoli</li>\n                    <li>Carrots</li>\n                    <li>Bell Peppers</li>\n                    <li>Soy Sauce</li>\n                    <li>Rice Noodles</li>\n                </ul>\n                <a href=\"#\">View Recipe</a>\n            </div>\n        </div>\n\n        <div class=\"recipe-card\">\n            <img src=\"https://via.placeholder.com/400x200?text=Chocolate+Chip+Cookies\" alt=\"Chocolate Chip Cookies\">\n            <div class=\"recipe-content\">\n                <h2>Chocolate Chip Cookies</h2>\n                <p>Soft, chewy, and loaded with chocolate chips. A timeless dessert favorite.</p>\n                <h3>Ingredients:</h3>\n                <ul>\n                    <li>Flour</li>\n                    <li>Butter</li>\n                    <li>Sugar</li>\n                    <li>Chocolate Chips</li>\n                    <li>Eggs</li>\n                </ul>\n                <a href=\"#\">View Recipe</a>\n            </div>\n        </div>\n    </div>\n</body>\n</html>"
      },
      {
        "title": "Interactive Image Gallery",
        "description": "An image gallery with a light/dark mode toggle and basic image captions, demonstrating responsiveness.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Image Gallery</title>\n    <style>\n        body { font-family: 'Helvetica Neue', sans-serif; margin: 0; padding: 20px; transition: background-color 0.3s, color 0.3s; }\n        body.light-mode { background-color: #f0f2f5; color: #333; }\n        body.dark-mode { background-color: #333; color: #f0f2f5; }\n        h1 { text-align: center; margin-bottom: 30px; }\n        .theme-toggle { text-align: center; margin-bottom: 20px; }\n        .theme-toggle button { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; transition: background-color 0.3s; }\n        .theme-toggle button:hover { background-color: #0056b3; }\n        .gallery { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 20px; max-width: 1200px; margin: 0 auto; }\n        .gallery-item { background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 10px rgba(0,0,0,0.1); transition: transform 0.2s; }\n        .dark-mode .gallery-item { background-color: #444; box-shadow: 0 4px 10px rgba(255,255,255,0.05); }\n        .gallery-item:hover { transform: translateY(-5px); }\n        .gallery-item img { width: 100%; height: 200px; object-fit: cover; display: block; }\n        .gallery-item .caption { padding: 15px; text-align: center; font-size: 0.9em; color: #666; }\n        .dark-mode .gallery-item .caption { color: #ccc; }\n    </style>\n</head>\n<body class=\"light-mode\">\n    <h1>My Beautiful Image Gallery</h1>\n    <div class=\"theme-toggle\">\n        <button onclick=\"toggleTheme()\">Toggle Light/Dark Mode</button>\n    </div>\n\n    <div class=\"gallery\">\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/400x200?text=Nature+Scene+1\" alt=\"Lush green forest with tall trees\">\n            <div class=\"caption\">A peaceful forest scene.</div>\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/400x200?text=Cityscape+Night\" alt=\"Night view of a vibrant city skyline\">\n            <div class=\"caption\">City lights at night.</div>\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/400x200?text=Mountain+View\" alt=\"Majestic mountains covered in snow\">\n            <div class=\"caption\">Snow-capped mountains in the morning.</div>\n        </div>\n        <div class=\"gallery-item\">\n            <img src=\"https://via.placeholder.com/400x200?text=Ocean+Sunset\" alt=\"Orange and pink sunset over the ocean\">\n            <div class=\"caption\">Breathtaking ocean sunset.</div>\n        </div>\n    </div>\n\n    <script>\n        function toggleTheme() {\n            const body = document.body;\n            body.classList.toggle('dark-mode');\n            body.classList.toggle('light-mode');\n        }\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Simple Contact Form with Validation",
        "description": "A clean, responsive contact form with HTML5 built-in validation and basic styling.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Contact Us</title>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; background-color: #e3f2fd; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }\n        .form-container { background-color: white; padding: 40px; border-radius: 10px; box-shadow: 0 8px 25px rgba(0,0,0,0.15); width: 90%; max-width: 500px; }\n        h1 { text-align: center; color: #1565c0; margin-bottom: 30px; }\n        .form-group { margin-bottom: 20px; }\n        .form-group label { display: block; margin-bottom: 8px; font-weight: bold; color: #555; }\n        .form-group input[type=\"text\"], .form-group input[type=\"email\"], .form-group textarea { width: 100%; padding: 12px; border: 1px solid #b0bec5; border-radius: 5px; font-size: 1em; box-sizing: border-box; transition: border-color 0.3s; }\n        .form-group input:focus, .form-group textarea:focus { border-color: #2196f3; outline: none; box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.2); }\n        .form-group textarea { resize: vertical; min-height: 100px; }\n        button[type=\"submit\"] { background-color: #2196f3; color: white; padding: 14px 25px; border: none; border-radius: 5px; cursor: pointer; font-size: 1.1em; width: 100%; transition: background-color 0.3s; }\n        button[type=\"submit\"]:hover { background-color: #1976d2; }\n        .message { margin-top: 20px; padding: 10px; border-radius: 5px; text-align: center; display: none; }\n        .message.success { background-color: #e8f5e9; color: #2e7d32; border: 1px solid #4CAF50; }\n        .message.error { background-color: #ffebee; color: #c62828; border: 1px solid #f44336; }\n    </style>\n</head>\n<body>\n    <div class=\"form-container\">\n        <h1>Contact Us</h1>\n        <form id=\"contactForm\" action=\"#\" method=\"POST\">\n            <div class=\"form-group\">\n                <label for=\"name\">Name:</label>\n                <input type=\"text\" id=\"name\" name=\"name\" required placeholder=\"Your Full Name\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\" required placeholder=\"your@example.com\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"subject\">Subject:</label>\n                <input type=\"text\" id=\"subject\" name=\"subject\" required placeholder=\"Regarding...\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"message\">Message:</label>\n                <textarea id=\"message\" name=\"message\" rows=\"6\" required placeholder=\"Your message...\"></textarea>\n            </div>\n            <button type=\"submit\">Send Message</button>\n            <div id=\"formMessage\" class=\"message\"></div>\n        </form>\n    </div>\n\n    <script>\n        document.getElementById('contactForm').addEventListener('submit', function(event) {\n            event.preventDefault(); // Prevent default form submission\n            const formMessage = document.getElementById('formMessage');\n\n            // Basic HTML5 validation check (browser handles initial validation)\n            if (this.checkValidity()) {\n                formMessage.textContent = 'Message sent successfully!';\n                formMessage.className = 'message success';\n                formMessage.style.display = 'block';\n                this.reset(); // Clear the form\n                // In a real app, you'd send this data to a server using fetch()\n            } else {\n                formMessage.textContent = 'Please fill out all required fields correctly.';\n                formMessage.className = 'message error';\n                formMessage.style.display = 'block';\n            }\n        });\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Interactive To-Do List",
        "description": "A JavaScript-powered to-do list using `localStorage` to persist tasks.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n    <style>\n        body { font-family: 'Roboto', sans-serif; background-color: #e8eaf6; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }\n        .todo-container { background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 5px 20px rgba(0,0,0,0.1); width: 90%; max-width: 500px; }\n        h1 { text-align: center; color: #3f51b5; margin-bottom: 25px; }\n        .input-group { display: flex; margin-bottom: 25px; }\n        .input-group input { flex-grow: 1; padding: 12px; border: 1px solid #c5cae9; border-radius: 5px 0 0 5px; font-size: 1em; }\n        .input-group input:focus { outline: none; border-color: #3f51b5; }\n        .input-group button { padding: 12px 20px; background-color: #3f51b5; color: white; border: none; border-radius: 0 5px 5px 0; cursor: pointer; font-size: 1em; transition: background-color 0.3s; }\n        .input-group button:hover { background-color: #303f9f; }\n        .todo-list { list-style: none; padding: 0; }\n        .todo-item { display: flex; justify-content: space-between; align-items: center; background-color: #f8f9fa; padding: 12px 15px; margin-bottom: 10px; border-radius: 5px; border: 1px solid #e0e0e0; }\n        .todo-item.completed span { text-decoration: line-through; color: #777; }\n        .todo-item button { background-color: #f44336; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; transition: background-color 0.3s; }\n        .todo-item button:hover { background-color: #d32f2f; }\n        .todo-item input[type=\"checkbox\"] { margin-right: 10px; transform: scale(1.2); }\n    </style>\n</head>\n<body>\n    <div class=\"todo-container\">\n        <h1>My To-Do List</h1>\n        <div class=\"input-group\">\n            <input type=\"text\" id=\"todoInput\" placeholder=\"Add a new task...\">\n            <button onclick=\"addTask()\">Add Task</button>\n        </div>\n        <ul id=\"todoList\" class=\"todo-list\"></ul>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', loadTasks);\n\n        function addTask() {\n            const todoInput = document.getElementById('todoInput');\n            const taskText = todoInput.value.trim();\n\n            if (taskText !== '') {\n                const task = { text: taskText, completed: false };\n                saveTask(task);\n                renderTask(task);\n                todoInput.value = '';\n            }\n        }\n\n        function renderTask(task) {\n            const todoList = document.getElementById('todoList');\n            const listItem = document.createElement('li');\n            listItem.classList.add('todo-item');\n            if (task.completed) {\n                listItem.classList.add('completed');\n            }\n\n            listItem.innerHTML = `\n                <div>\n                    <input type=\"checkbox\" ${task.completed ? 'checked' : ''} onclick=\"toggleComplete(this)\">\n                    <span>${task.text}</span>\n                </div>\n                <button onclick=\"removeTask(this)\">Delete</button>\n            `;\n            todoList.appendChild(listItem);\n        }\n\n        function saveTask(task) {\n            let tasks = JSON.parse(localStorage.getItem('todos')) || [];\n            tasks.push(task);\n            localStorage.setItem('todos', JSON.stringify(tasks));\n        }\n\n        function loadTasks() {\n            let tasks = JSON.parse(localStorage.getItem('todos')) || [];\n            tasks.forEach(task => renderTask(task));\n        }\n\n        function toggleComplete(checkbox) {\n            const listItem = checkbox.closest('.todo-item');\n            listItem.classList.toggle('completed');\n            updateLocalStorage();\n        }\n\n        function removeTask(button) {\n            const listItem = button.closest('.todo-item');\n            listItem.remove();\n            updateLocalStorage();\n        }\n\n        function updateLocalStorage() {\n            const todoList = document.getElementById('todoList');\n            const items = todoList.querySelectorAll('.todo-item');\n            const tasks = [];\n            items.forEach(item => {\n                const text = item.querySelector('span').textContent;\n                const completed = item.classList.contains('completed');\n                tasks.push({ text, completed });\n            });\n            localStorage.setItem('todos', JSON.stringify(tasks));\n        }\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Responsive Navigation Bar",
        "description": "A responsive navigation bar that transforms into a hamburger menu on smaller screens using only HTML and CSS.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Responsive Navbar</title>\n    <style>\n        body { font-family: 'Lato', sans-serif; margin: 0; background-color: #f4f7f6; }\n        .navbar { background-color: #2c3e50; padding: 15px 20px; display: flex; justify-content: space-between; align-items: center; color: white; }\n        .navbar-brand { font-size: 1.8em; font-weight: bold; text-decoration: none; color: white; }\n        .nav-links { list-style: none; margin: 0; padding: 0; display: flex; }\n        .nav-links li { margin-left: 25px; }\n        .nav-links a { color: white; text-decoration: none; font-size: 1.1em; transition: color 0.3s ease; }\n        .nav-links a:hover { color: #88d498; }\n        .hamburger { display: none; flex-direction: column; cursor: pointer; }\n        .hamburger .bar { width: 25px; height: 3px; background-color: white; margin: 4px 0; transition: 0.4s; }\n\n        @media (max-width: 768px) {\n            .nav-links { display: none; flex-direction: column; width: 100%; text-align: center; background-color: #34495e; position: absolute; top: 60px; left: 0; }\n            .nav-links.active { display: flex; }\n            .nav-links li { margin: 10px 0; }\n            .hamburger { display: flex; }\n        }\n    </style>\n</head>\n<body>\n    <nav class=\"navbar\">\n        <a href=\"#\" class=\"navbar-brand\">MySite</a>\n        <div class=\"hamburger\" onclick=\"toggleMenu()\">\n            <span class=\"bar\"></span>\n            <span class=\"bar\"></span>\n            <span class=\"bar\"></span>\n        </div>\n        <ul class=\"nav-links\" id=\"navLinks\">\n            <li><a href=\"#\">Home</a></li>\n            <li><a href=\"#\">Services</a></li>\n            <li><a href=\"#\">About</a></li>\n            <li><a href=\"#\">Contact</a></li>\n        </ul>\n    </nav>\n\n    <div style=\"padding: 50px; text-align: center;\">\n        <h2>Welcome to Our Page!</h2>\n        <p>Resize your browser window to see the responsive navigation in action.</p>\n    </div>\n\n    <script>\n        function toggleMenu() {\n            const navLinks = document.getElementById('navLinks');\n            navLinks.classList.toggle('active');\n        }\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Interactive Accordion FAQ",
        "description": "An FAQ section built with HTML details and summary tags, enhanced with a small CSS snippet for styling.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>FAQ Accordion</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f0f4f8; margin: 20px; color: #333; }\n        h1 { text-align: center; color: #2c3e50; margin-bottom: 40px; }\n        .accordion-container { max-width: 800px; margin: 0 auto; }\n        details { background-color: white; border: 1px solid #ddd; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.05); }\n        summary { padding: 18px 25px; font-weight: bold; cursor: pointer; outline: none; list-style: none; display: flex; align-items: center; color: #34495e; }\n        summary::-webkit-details-marker { display: none; } /* Hide default marker for Webkit */\n        summary::before { content: '+'; font-size: 1.5em; margin-right: 15px; transition: transform 0.3s ease; color: #2980b9; }\n        details[open] summary::before { content: '-'; transform: rotate(180deg); }\n        .accordion-content { padding: 10px 25px 20px; border-top: 1px solid #eee; color: #555; line-height: 1.5; }\n    </style>\n</head>\n<body>\n    <h1>Frequently Asked Questions</h1>\n\n    <div class=\"accordion-container\">\n        <details>\n            <summary>What is HTML?</summary>\n            <div class=\"accordion-content\">\n                <p>HTML stands for HyperText Markup Language. It is the standard markup language for creating web pages and web applications. It provides the structure of web content.</p>\n            </div>\n        </details>\n\n        <details>\n            <summary>What is CSS?</summary>\n            <div class=\"accordion-content\">\n                <p>CSS stands for Cascading Style Sheets. It is used for describing the presentation of a document written in HTML. CSS describes how HTML elements should be displayed on screen, paper, or in other media.</p>\n            </div>\n        </details>\n\n        <details>\n            <summary>What is JavaScript?</summary>\n            <div class=\"accordion-content\">\n                <p>JavaScript is a programming language that enables interactive web pages. It allows you to implement complex features on web pages, such as dynamic content, interactive maps, animated graphics, and more.</p>\n            </div>\n        </details>\n\n        <details>\n            <summary>How can I learn more?</summary>\n            <div class=\"accordion-content\">\n                <p>There are many resources available online! Websites like MDN Web Docs, W3Schools, and freeCodeCamp offer comprehensive tutorials and exercises for learning web development.</p>\n            </div>\n        </details>\n    </div>\n</body>\n</html>"
      },
      {
        "title": "Minimalist Calculator",
        "description": "A basic calculator interface built with HTML for structure and CSS for layout, ready for JavaScript functionality.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple Calculator</title>\n    <style>\n        body { font-family: 'Roboto Mono', monospace; background-color: #eceff1; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }\n        .calculator { background-color: #37474f; border-radius: 15px; padding: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.3); width: 300px; }\n        .display { background-color: #263238; color: white; font-size: 2.5em; padding: 20px; border-radius: 10px; text-align: right; margin-bottom: 20px; overflow: hidden; }\n        .buttons-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; }\n        .button { background-color: #546e7a; color: white; border: none; border-radius: 10px; padding: 20px; font-size: 1.5em; cursor: pointer; transition: background-color 0.2s ease, transform 0.1s ease; }\n        .button:hover { background-color: #455a64; transform: translateY(-2px); }\n        .button:active { transform: translateY(0); }\n        .button.operator { background-color: #ef6c00; }\n        .button.operator:hover { background-color: #e65100; }\n        .button.equals { background-color: #43a047; grid-column: span 2; }\n        .button.equals:hover { background-color: #388e3c; }\n        .button.clear { background-color: #d32f2f; }\n        .button.clear:hover { background-color: #b71c1c; }\n    </style>\n</head>\n<body>\n    <div class=\"calculator\">\n        <div class=\"display\" id=\"display\">0</div>\n        <div class=\"buttons-grid\">\n            <button class=\"button clear\">AC</button>\n            <button class=\"button\">+/-</button>\n            <button class=\"button\">%</button>\n            <button class=\"button operator\">/</button>\n\n            <button class=\"button\">7</button>\n            <button class=\"button\">8</button>\n            <button class=\"button\">9</button>\n            <button class=\"button operator\">*</button>\n\n            <button class=\"button\">4</button>\n            <button class=\"button\">5</button>\n            <button class=\"button\">6</button>\n            <button class=\"button operator\">-</button>\n\n            <button class=\"button\">1</button>\n            <button class=\"button\">2</button>\n            <button class=\"button\">3</button>\n            <button class=\"button operator\">+</button>\n\n            <button class=\"button\">0</button>\n            <button class=\"button\">.</button>\n            <button class=\"button equals\">=</button>\n        </div>\n    </div>\n\n    <script>\n        // This is a basic structure. JavaScript logic for calculation is omitted for brevity\n        // but would involve event listeners on buttons and updating the display.\n        const display = document.getElementById('display');\n        const buttons = document.querySelectorAll('.button');\n        let currentInput = '0';\n        let operator = null;\n        let previousInput = '';\n\n        buttons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                const value = e.target.textContent;\n\n                if (value === 'AC') {\n                    currentInput = '0';\n                    operator = null;\n                    previousInput = '';\n                } else if (value === '+/-') {\n                    currentInput = (parseFloat(currentInput) * -1).toString();\n                } else if (value === '%') {\n                    currentInput = (parseFloat(currentInput) / 100).toString();\n                } else if (['/', '*', '-', '+'].includes(value)) {\n                    operator = value;\n                    previousInput = currentInput;\n                    currentInput = '0';\n                } else if (value === '=') {\n                    // Implement calculation logic here\n                    let result;\n                    const prev = parseFloat(previousInput);\n                    const current = parseFloat(currentInput);\n                    if (operator === '+') result = prev + current;\n                    else if (operator === '-') result = prev - current;\n                    else if (operator === '*') result = prev * current;\n                    else if (operator === '/') result = prev / current;\n\n                    currentInput = result.toString();\n                    operator = null;\n                    previousInput = '';\n                } else {\n                    if (currentInput === '0' && value !== '.') {\n                        currentInput = value;\n                    } else {\n                        currentInput += value;\n                    }\n                }\n                display.textContent = currentInput;\n            });\n        });\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Registration Form with Advanced Inputs",
        "description": "A detailed user registration form utilizing various HTML5 input types, attributes like `pattern`, and fieldsets for organization.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Registration</title>\n    <style>\n        body { font-family: 'Arial', sans-serif; background-color: #f9f9f9; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 0; }\n        .registration-container { background-color: white; padding: 40px; border-radius: 12px; box-shadow: 0 6px 20px rgba(0,0,0,0.1); width: 90%; max-width: 650px; }\n        h1 { text-align: center; color: #333; margin-bottom: 30px; }\n        fieldset { border: 1px solid #ccc; border-radius: 8px; padding: 25px; margin-bottom: 25px; }\n        legend { font-size: 1.3em; font-weight: bold; color: #555; padding: 0 10px; }\n        .form-group { margin-bottom: 18px; display: flex; flex-direction: column; }\n        .form-group label { margin-bottom: 8px; font-weight: bold; color: #444; }\n        .form-group input[type=\"text\"], .form-group input[type=\"email\"], .form-group input[type=\"password\"], .form-group input[type=\"date\"], .form-group input[type=\"tel\"], .form-group input[type=\"url\"], .form-group select { width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 5px; font-size: 1em; box-sizing: border-box; transition: border-color 0.2s; }\n        .form-group input:focus, .form-group select:focus { border-color: #007bff; outline: none; box-shadow: 0 0 0 3px rgba(0,123,255,0.15); }\n        .gender-options { display: flex; gap: 20px; margin-top: 10px; }\n        .gender-options label { font-weight: normal; }\n        .checkbox-group { margin-top: 20px; }\n        .checkbox-group label { display: flex; align-items: center; font-weight: normal; }\n        .checkbox-group input { margin-right: 10px; }\n        button[type=\"submit\"] { background-color: #28a745; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 1.1em; width: 100%; margin-top: 20px; transition: background-color 0.3s; }\n        button[type=\"submit\"]:hover { background-color: #218838; }\n    </style>\n</head>\n<body>\n    <div class=\"registration-container\">\n        <h1>Register for an Account</h1>\n        <form action=\"#\" method=\"POST\">\n            <fieldset>\n                <legend>Personal Information</legend>\n                <div class=\"form-group\">\n                    <label for=\"full-name\">Full Name:</label>\n                    <input type=\"text\" id=\"full-name\" name=\"full_name\" required placeholder=\"John Doe\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"email\">Email:</label>\n                    <input type=\"email\" id=\"email\" name=\"email\" required placeholder=\"john.doe@example.com\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"password\">Password:</label>\n                    <input type=\"password\" id=\"password\" name=\"password\" required minlength=\"8\" placeholder=\"Minimum 8 characters\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"dob\">Date of Birth:</label>\n                    <input type=\"date\" id=\"dob\" name=\"dob\" max=\"2007-01-01\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label>Gender:</label>\n                    <div class=\"gender-options\">\n                        <label><input type=\"radio\" name=\"gender\" value=\"male\" required> Male</label>\n                        <label><input type=\"radio\" name=\"gender\" value=\"female\"> Female</label>\n                        <label><input type=\"radio\" name=\"gender\" value=\"other\"> Other</label>\n                    </div>\n                </div>\n            </fieldset>\n\n            <fieldset>\n                <legend>Contact & Preferences</legend>\n                <div class=\"form-group\">\n                    <label for=\"phone\">Phone Number:</label>\n                    <input type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{10}\" placeholder=\"e.g., 1234567890\">\n                    <small>Format: 10 digits (no spaces/dashes)</small>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"website\">Personal Website (Optional):</label>\n                    <input type=\"url\" id=\"website\" name=\"website\" placeholder=\"https://example.com\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"country\">Country:</label>\n                    <select id=\"country\" name=\"country\" required>\n                        <option value=\"\">--Select Country--</option>\n                        <option value=\"usa\">United States</option>\n                        <option value=\"canada\">Canada</option>\n                        <option value=\"uk\">United Kingdom</option>\n                        <option value=\"india\">India</option>\n                        <option value=\"australia\">Australia</option>\n                    </select>\n                </div>\n                <div class=\"checkbox-group\">\n                    <label>\n                        <input type=\"checkbox\" name=\"newsletter\" value=\"yes\">\n                        Subscribe to our newsletter\n                    </label>\n                    <label>\n                        <input type=\"checkbox\" name=\"terms\" value=\"agreed\" required>\n                        I agree to the <a href=\"#\">Terms and Conditions</a>\n                    </label>\n                </div>\n            </fieldset>\n\n            <button type=\"submit\">Register Account</button>\n        </form>\n    </div>\n</body>\n</html>"
      },
      {
        "title": "Blog Post with Video and Audio",
        "description": "A single blog post page demonstrating the use of HTML5 `<video>` and `<audio>` tags with multiple sources and controls.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My First Blog Post with Multimedia</title>\n    <style>\n        body { font-family: 'Palatino Linotype', 'Book Antiqua', Palatino, serif; line-height: 1.7; margin: 0; padding: 20px; background-color: #fefefe; color: #333; }\n        .container { max-width: 800px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.08); }\n        h1 { text-align: center; color: #2c3e50; margin-bottom: 25px; }\n        .post-meta { text-align: center; font-size: 0.9em; color: #777; margin-bottom: 30px; }\n        video, audio { display: block; max-width: 100%; margin: 25px auto; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }\n        p { margin-bottom: 1em; }\n        .callout { background-color: #e0f7fa; border-left: 5px solid #00bcd4; padding: 15px 20px; margin: 25px 0; border-radius: 5px; }\n        footer { text-align: center; padding-top: 30px; margin-top: 40px; border-top: 1px solid #eee; font-size: 0.9em; color: #666; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>The Wonders of Nature's Soundscape</h1>\n        <div class=\"post-meta\">\n            Posted by <strong>Nature Explorer</strong> on <time datetime=\"2023-11-01\">November 1, 2023</time>\n        </div>\n\n        <p>There's nothing quite like immersing yourself in the raw, untouched beauty of the natural world. From the rustling leaves to the distant chirping of birds, nature offers a symphony unlike any other.</p>\n\n        <h2>A Glimpse into the Forest</h2>\n        <video controls poster=\"https://via.placeholder.com/640x360?text=Forest+Video+Thumbnail\">\n            <source src=\"https://www.w3schools.com/html/mov_bbb.mp4\" type=\"video/mp4\">\n            <source src=\"https://www.w3schools.com/html/mov_bbb.ogg\" type=\"video/ogg\">\n            Your browser does not support the video tag. Please consider updating your browser.\n        </video>\n        <p style=\"text-align: center; font-style: italic; font-size: 0.9em; color: #666;\">A short video clip of a peaceful forest.</p>\n\n        <div class=\"callout\">\n            <strong>Tip:</strong> For the best experience, wear headphones while listening to the audio recordings!\n        </div>\n\n        <h2>Sounds of the Wild</h2>\n        <p>Close your eyes and listen to the ambient sounds captured from a secluded wildlife reserve. It's truly a meditative experience.</p>\n        <audio controls>\n            <source src=\"https://www.w3schools.com/html/horse.mp3\" type=\"audio/mpeg\">\n            <source src=\"https://www.w3schools.com/html/horse.ogg\" type=\"audio/ogg\">\n            Your browser does not support the audio tag. You can download the <a href=\"https://www.w3schools.com/html/horse.mp3\">MP3 here</a>.\n        </audio>\n        <p style=\"text-align: center; font-style: italic; font-size: 0.9em; color: #666;\">Audio recording of various wildlife sounds.</p>\n\n        <p>We hope you enjoyed this journey through the captivating sights and sounds of nature. Stay tuned for more adventures!</p>\n\n        <footer>\n            <p>&copy; 2023 Nature Blog. All rights reserved.</p>\n        </footer>\n    </div>\n</body>\n</html>"
      },
      {
        "title": "Interactive Data Table with Search",
        "description": "A static HTML table for data display, enhanced with a simple client-side search functionality using JavaScript.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dynamic Data Table</title>\n    <style>\n        body { font-family: 'Verdana', Geneva, sans-serif; background-color: #f0f4f8; margin: 20px; color: #333; }\n        .container { max-width: 900px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); }\n        h1 { text-align: center; color: #1e88e5; margin-bottom: 30px; }\n        .search-container { margin-bottom: 25px; text-align: center; }\n        .search-container input { padding: 10px 15px; width: 70%; max-width: 400px; border: 1px solid #ccc; border-radius: 5px; font-size: 1em; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        th { background-color: #e3f2fd; color: #333; font-weight: bold; }\n        tr:nth-child(even) { background-color: #f9f9f9; }\n        tr:hover { background-color: #eef7fc; }\n        tfoot { font-style: italic; color: #777; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Product Inventory</h1>\n        <div class=\"search-container\">\n            <input type=\"text\" id=\"searchInput\" onkeyup=\"searchTable()\" placeholder=\"Search for products...\">\n        </div>\n        <table id=\"productTable\">\n            <thead>\n                <tr>\n                    <th>Product ID</th>\n                    <th>Name</th>\n                    <th>Category</th>\n                    <th>Price</th>\n                    <th>Stock</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>P001</td>\n                    <td>Laptop Pro</td>\n                    <td>Electronics</td>\n                    <td>$1200.00</td>\n                    <td>50</td>\n                </tr>\n                <tr>\n                    <td>P002</td>\n                    <td>Mechanical Keyboard</td>\n                    <td>Accessories</td>\n                    <td>$85.50</td>\n                    <td>120</td>\n                </tr>\n                <tr>\n                    <td>P003</td>\n                    <td>Wireless Mouse</td>\n                    <td>Accessories</td>\n                    <td>$25.00</td>\n                    <td>200</td>\n                </tr>\n                <tr>\n                    <td>P004</td>\n                    <td>4K Monitor</td>\n                    <td>Electronics</td>\n                    <td>$350.00</td>\n                    <td>30</td>\n                </tr>\n                <tr>\n                    <td>P005</td>\n                    <td>Desk Chair Ergonomic</td>\n                    <td>Furniture</td>\n                    <td>$150.00</td>\n                    <td>80</td>\n                </tr>\n            </tbody>\n            <tfoot>\n                <tr>\n                    <td colspan=\"5\">Displaying current inventory data.</td>\n                </tr>\n            </tfoot>\n        </table>\n    </div>\n\n    <script>\n        function searchTable() {\n            const input = document.getElementById('searchInput');\n            const filter = input.value.toUpperCase();\n            const table = document.getElementById('productTable');\n            const tr = table.getElementsByTagName('tr');\n\n            for (let i = 1; i < tr.length - 1; i++) { // Start from 1 to skip header, end before footer\n                let tdFound = false;\n                const tds = tr[i].getElementsByTagName('td');\n                for (let j = 0; j < tds.length; j++) {\n                    const td = tds[j];\n                    if (td) {\n                        if (td.textContent.toUpperCase().indexOf(filter) > -1) {\n                            tdFound = true;\n                            break;\n                        }\n                    }\n                }\n                tr[i].style.display = tdFound ? '' : 'none';\n            }\n        }\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Basic Photo Editor (Canvas)",
        "description": "A basic image manipulation tool using the HTML5 `<canvas>` element to draw and apply a simple grayscale filter.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Canvas Photo Editor</title>\n    <style>\n        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f2f2f2; display: flex; flex-direction: column; align-items: center; min-height: 100vh; margin: 0; padding: 20px; }\n        h1 { color: #333; margin-bottom: 30px; }\n        .editor-container { background-color: white; padding: 25px; border-radius: 10px; box-shadow: 0 5px 20px rgba(0,0,0,0.1); text-align: center; }\n        #imageUpload { margin-bottom: 20px; }\n        canvas { border: 2px solid #ccc; background-color: #eee; display: block; margin: 0 auto 20px; max-width: 100%; height: auto; }\n        .controls button { background-color: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-size: 1em; margin: 5px; transition: background-color 0.3s; }\n        .controls button:hover { background-color: #0056b3; }\n    </style>\n</head>\n<body>\n    <h1>Simple Canvas Photo Editor</h1>\n    <div class=\"editor-container\">\n        <input type=\"file\" id=\"imageUpload\" accept=\"image/*\">\n        <canvas id=\"editorCanvas\"></canvas>\n        <div class=\"controls\">\n            <button onclick=\"applyGrayscale()\">Apply Grayscale</button>\n            <button onclick=\"resetImage()\">Reset</button>\n        </div>\n    </div>\n\n    <script>\n        const imageUpload = document.getElementById('imageUpload');\n        const canvas = document.getElementById('editorCanvas');\n        const ctx = canvas.getContext('2d');\n        let img = new Image();\n        let originalImageData;\n\n        imageUpload.addEventListener('change', (e) => {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    img.onload = () => {\n                        canvas.width = img.naturalWidth;\n                        canvas.height = img.naturalHeight;\n                        ctx.drawImage(img, 0, 0);\n                        originalImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                    };\n                    img.src = event.target.result;\n                };\n                reader.readAsDataURL(file);\n            }\n        });\n\n        function applyGrayscale() {\n            if (!originalImageData) return;\n\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            const data = imageData.data;\n\n            for (let i = 0; i < data.length; i += 4) {\n                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;\n                data[i] = avg;     // Red\n                data[i + 1] = avg; // Green\n                data[i + 2] = avg; // Blue\n            }\n            ctx.putImageData(imageData, 0, 0);\n        }\n\n        function resetImage() {\n            if (originalImageData) {\n                ctx.putImageData(originalImageData, 0, 0);\n            }\n        }\n    </script>\n</body>\n</html>"
      },
      {
        "title": "Draggable Card Interface",
        "description": "A simple interface with draggable cards using the HTML Drag and Drop API and basic styling.",
        "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Draggable Cards</title>\n    <style>\n        body { font-family: 'Comic Sans MS', cursive; background-color: #fff9c4; display: flex; flex-direction: column; align-items: center; min-height: 100vh; margin: 0; padding: 20px; }\n        h1 { color: #fbc02d; margin-bottom: 30px; }\n        .container { display: flex; gap: 30px; flex-wrap: wrap; justify-content: center; }\n        .drag-zone, .drop-zone { background-color: #ffecb3; border: 2px dashed #ffb300; border-radius: 15px; padding: 25px; min-width: 280px; min-height: 250px; display: flex; flex-direction: column; align-items: center; gap: 15px; flex: 1; }\n        .drop-zone { background-color: #e0f2f7; border: 2px dashed #039be5; }\n        .drop-zone.hover { background-color: #bbdefb; border-style: solid; }\n        .card { background-color: white; border: 1px solid #ccc; border-radius: 10px; padding: 20px; width: 200px; text-align: center; box-shadow: 0 4px 8px rgba(0,0,0,0.1); cursor: grab; transition: transform 0.2s; }\n        .card:active { cursor: grabbing; transform: scale(1.02); }\n        .card.dragging { opacity: 0.5; border: 2px solid #ffb300; }\n        .card h3 { color: #666; margin-top: 0; }\n    </style>\n</head>\n<body>\n    <h1>Drag & Drop Your Favorite Cards!</h1>\n\n    <div class=\"container\">\n        <div class=\"drag-zone\" id=\"dragZone\">\n            <h2>Available Cards</h2>\n            <div class=\"card\" draggable=\"true\" id=\"card1\">\n                <h3>Card One</h3>\n                <p>This is the first card.</p>\n            </div>\n            <div class=\"card\" draggable=\"true\" id=\"card2\">\n                <h3>Card Two</h3>\n                <p>This is the second card.</p>\n            </div>\n        </div>\n\n        <div class=\"drop-zone\" id=\"dropZone\">\n            <h2>Drop Cards Here</h2>\n            <p>Drag cards from the left into this zone.</p>\n        </div>\n    </div>\n\n    <script>\n        const dragZone = document.getElementById('dragZone');\n        const dropZone = document.getElementById('dropZone');\n        const cards = document.querySelectorAll('.card');\n\n        cards.forEach(card => {\n            card.addEventListener('dragstart', (e) => {\n                e.dataTransfer.setData('text/plain', e.target.id); // Set card ID\n                e.dataTransfer.effectAllowed = 'move';\n                setTimeout(() => e.target.classList.add('dragging'), 0);\n            });\n\n            card.addEventListener('dragend', (e) => {\n                e.target.classList.remove('dragging');\n            });\n        });\n\n        dropZone.addEventListener('dragover', (e) => {\n            e.preventDefault(); // Crucial: Allows drop\n            e.dataTransfer.dropEffect = 'move';\n            dropZone.classList.add('hover');\n        });\n\n        dropZone.addEventListener('dragleave', () => {\n            dropZone.classList.remove('hover');\n        });\n\n        dropZone.addEventListener('drop', (e) => {\n            e.preventDefault();\n            dropZone.classList.remove('hover');\n            const data = e.dataTransfer.getData('text/plain');\n            const draggedCard = document.getElementById(data);\n            if (draggedCard) {\n                dropZone.appendChild(draggedCard);\n            }\n        });\n    </script>\n</body>\n</html>"
      }
    ]
  }